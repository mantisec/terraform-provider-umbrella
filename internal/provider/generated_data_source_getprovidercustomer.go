// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetprovidercustomerDataSource)
}

// GetprovidercustomerDataSource implements the getprovidercustomer data source
type GetprovidercustomerDataSource struct {
	client *apiClient
}

// getprovidercustomerDataModel represents the data source data model
type getprovidercustomerDataModel struct {
	Id                 types.String `tfsdk:"id"`
	Customerid         types.Int64  `tfsdk:"customerId"`
	Dealid             types.String `tfsdk:"dealId"`
	Ccwdealowneremails types.Set    `tfsdk:"ccwDealOwnerEmails"`
	Istrial            types.Bool   `tfsdk:"isTrial"`
	Addonrbi           types.String `tfsdk:"addonRbi"`
	Streetaddress      types.String `tfsdk:"streetAddress"`
	Adminemails        types.Set    `tfsdk:"adminEmails"`
	Modifiedat         types.String `tfsdk:"modifiedAt"`
	Addoncdfwl7        types.Bool   `tfsdk:"addonCdfwL7"`
	Createdat          types.String `tfsdk:"createdAt"`
	Customername       types.String `tfsdk:"customerName"`
	Packagename        types.String `tfsdk:"packageName"`
	Streetaddress2     types.String `tfsdk:"streetAddress2"`
	City               types.String `tfsdk:"city"`
	State              types.String `tfsdk:"state"`
	Countrycode        types.String `tfsdk:"countryCode"`
	Licensetype        types.String `tfsdk:"licenseType"`
	Seats              types.Int64  `tfsdk:"seats"`
	Zipcode            types.String `tfsdk:"zipCode"`
	Packageid          types.Int64  `tfsdk:"packageId"`
	Addondlp           types.Bool   `tfsdk:"addonDlp"`
}

// NewGetprovidercustomerDataSource creates a new getprovidercustomer data source
func NewGetprovidercustomerDataSource() datasource.DataSource {
	return &GetprovidercustomerDataSource{}
}

// Metadata returns the data source type name
func (d *GetprovidercustomerDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getprovidercustomer"
}

// Configure configures the data source with the provider client
func (d *GetprovidercustomerDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetprovidercustomerDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getprovidercustomer data source",
		Attributes: map[string]schema.Attribute{
			"id":                 schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"customerId":         schema.Int64Attribute{Computed: true, Description: "The ID for the customer."},
			"dealId":             schema.StringAttribute{Computed: true, Description: "The deal ID."},
			"ccwDealOwnerEmails": schema.SetAttribute{Computed: true, Description: "The list emails for the CCW deal owner.", ElementType: types.StringType},
			"isTrial":            schema.BoolAttribute{Computed: true, Description: "Specify whether the customer is a trial with an MSSP with SPLA (MSLA) license."},
			"addonRbi":           schema.StringAttribute{Computed: true, Description: "Specify whether remote browser isolation (RBI) is added to the subscription. Remote Browser Isolation Add-On is applicable for SIG Essentials or SIG Advantage only: `0` = No selection `1` = RBI Isolate Risky `2` = RBI Isolate Web Applications `3` = RBI Isolate All"},
			"streetAddress":      schema.StringAttribute{Computed: true, Description: "The street address for the customer."},
			"adminEmails":        schema.SetAttribute{Computed: true, Description: "The list of the administrator email addresses.", ElementType: types.StringType},
			"modifiedAt":         schema.StringAttribute{Computed: true, Description: "The time when the customer information was last modified. The timestamp is specified in the ISO 8601 format."},
			"addonCdfwL7":        schema.BoolAttribute{Computed: true, Description: "Specify whether if cloud delivered firewall (CDFW) is added to the subscription. The L7 Cloud Delivered Firewall Solution is applicable only for SIG E."},
			"createdAt":          schema.StringAttribute{Computed: true, Description: "The time when the customer information was created. The timestamp is specified in the ISO 8601 format."},
			"customerName":       schema.StringAttribute{Computed: true, Description: "The name of the customer's organization."},
			"packageName":        schema.StringAttribute{Computed: true, Description: "The name of the Umbrella package. To create or update a customer with either the SIG Essentials or SIG Advantage package, you must have a license for the selected package.  Package Id  Package Name  ::----  `99`  Umbrella Professional   `101`  Umbrella Platform   `107`  Umbrella Insights   `171`  Cisco Umbrella for Wireless LAN   `202`  Cisco Umbrella for EDU   `246`  Umbrella DNS Security Essentials   `248`  Umbrella DNS Security Advantage   `250`  Umbrella SIG Essentials   `252`  Umbrella SIG Advantage   `312`  Umbrella Not for Resale (NFR) MSP DNS Advantage  Note: The Umbrella NFR MSP DNS Advantage package (`312`) is only available in the Umbrella Secure MSP console."},
			"streetAddress2":     schema.StringAttribute{Computed: true, Description: "The second street address for the customer."},
			"city":               schema.StringAttribute{Computed: true, Description: "The name of the city where the customer's organization is located."},
			"state":              schema.StringAttribute{Computed: true, Description: "The name of the customer's state."},
			"countryCode":        schema.StringAttribute{Computed: true, Description: "The country code of the customer's organization."},
			"licenseType":        schema.StringAttribute{Computed: true, Description: "The type of license for the customer's organization."},
			"seats":              schema.Int64Attribute{Computed: true, Description: "The number of users."},
			"zipCode":            schema.StringAttribute{Computed: true, Description: "The zip code of the customer's organization."},
			"packageId":          schema.Int64Attribute{Computed: true, Description: "The ID of the Umbrella package. To create or update a customer with either the SIG Essentials or SIG Advantage package, you must have a license for the selected package.  Package Id  Package Name  ::----  `99`  Umbrella Professional   `101`  Umbrella Platform   `107`  Umbrella Insights   `171`  Cisco Umbrella for Wireless LAN   `202`  Cisco Umbrella for EDU   `246`  Umbrella DNS Security Essentials   `248`  Umbrella DNS Security Advantage   `250`  Umbrella SIG Essentials   `252`  Umbrella SIG Advantage   `312`  Umbrella Not for Resale (NFR) MSP DNS Advantage  Note: The Umbrella NFR MSP DNS Advantage package (`312`) is only available in the Umbrella Secure MSP console."},
			"addonDlp":           schema.BoolAttribute{Computed: true, Description: "Specify whether data loss prevention (DLP) is added to the subscription. The Data Loss Prevention Add-On is applicable only for SIG E."},
		},
	}
}

// Read reads the getprovidercustomer data
func (d *GetprovidercustomerDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getprovidercustomerDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
