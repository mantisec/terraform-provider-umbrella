// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetnetworkDataSource)
}

// GetnetworkDataSource implements the getnetwork data source
type GetnetworkDataSource struct {
	client *apiClient
}

// getnetworkDataModel represents the data source data model
type getnetworkDataModel struct {
	Id           types.String `tfsdk:"id"`
	Isdynamic    types.Bool   `tfsdk:"isDynamic"`
	Isverified   types.Bool   `tfsdk:"isVerified"`
	Status       types.String `tfsdk:"status"`
	Createdat    types.String `tfsdk:"createdAt"`
	Originid     types.Int64  `tfsdk:"originId"`
	Name         types.String `tfsdk:"name"`
	Ipaddress    types.String `tfsdk:"ipAddress"`
	Prefixlength types.Int64  `tfsdk:"prefixLength"`
}

// NewGetnetworkDataSource creates a new getnetwork data source
func NewGetnetworkDataSource() datasource.DataSource {
	return &GetnetworkDataSource{}
}

// Metadata returns the data source type name
func (d *GetnetworkDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getnetwork"
}

// Configure configures the data source with the provider client
func (d *GetnetworkDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetnetworkDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getnetwork data source",
		Attributes: map[string]schema.Attribute{
			"id":           schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"isDynamic":    schema.BoolAttribute{Computed: true, Description: "Specifies whether the network has a dynamic IP."},
			"isVerified":   schema.BoolAttribute{Computed: true, Description: "Specifies whether the network is verified."},
			"status":       schema.StringAttribute{Computed: true, Description: "The status of the network."},
			"createdAt":    schema.StringAttribute{Computed: true, Description: "The date and time (timestamp) when the network was created."},
			"originId":     schema.Int64Attribute{Computed: true, Description: "The origin ID."},
			"name":         schema.StringAttribute{Computed: true, Description: "The name of the network."},
			"ipAddress":    schema.StringAttribute{Computed: true, Description: "The IP address of the network."},
			"prefixLength": schema.Int64Attribute{Computed: true, Description: "The length of the prefix. Set a prefix length that is greater than 28 and less than 33."},
		},
	}
}

// Read reads the getnetwork data
func (d *GetnetworkDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getnetworkDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
