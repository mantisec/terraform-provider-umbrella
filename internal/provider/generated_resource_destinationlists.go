// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewDestinationlistsResource)
}

// DestinationlistsResource implements the destinationlists resource
type DestinationlistsResource struct {
	client *apiClient
}

// destinationlistsModel represents the resource data model
type destinationlistsModel struct {
	Id                   types.String `tfsdk:"id"`
	Access               types.String `tfsdk:"access"`
	IsGlobal             types.Bool   `tfsdk:"is_global"`
	Name                 types.String `tfsdk:"name"`
	BundleTypeId         types.Int64  `tfsdk:"bundle_type_id"`
	OrganizationId       types.Int64  `tfsdk:"organization_id"`
	ThirdpartyCategoryId types.Int64  `tfsdk:"thirdparty_category_id"`
	CreatedAt            types.Int64  `tfsdk:"created_at"`
	ModifiedAt           types.Int64  `tfsdk:"modified_at"`
	IsMspDefault         types.Bool   `tfsdk:"is_msp_default"`
	MarkedForDeletion    types.Bool   `tfsdk:"marked_for_deletion"`
}

// NewDestinationlistsResource creates a new destinationlists resource
func NewDestinationlistsResource() resource.Resource {
	return &DestinationlistsResource{}
}

// Metadata returns the resource type name
func (r *DestinationlistsResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_destinationlists"
}

// Configure configures the resource with the provider client
func (r *DestinationlistsResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *DestinationlistsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "destinationlists resource",
		Attributes: map[string]schema.Attribute{
			"id":                     schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"access":                 schema.StringAttribute{Required: true, Description: "The type of access for the destination list (allow/block)"},
			"is_global":              schema.BoolAttribute{Required: true, Description: "Specifies whether the destination list is a global destination list"},
			"name":                   schema.StringAttribute{Required: true, Description: "The name of the destination list"},
			"bundle_type_id":         schema.Int64Attribute{Optional: true, Description: "The type of the destination list in the policy"},
			"organization_id":        schema.Int64Attribute{Computed: true, Description: "The organization ID"},
			"thirdparty_category_id": schema.Int64Attribute{Computed: true, Description: "The third-party category ID of the destination list"},
			"created_at":             schema.Int64Attribute{Computed: true, Description: "The date and time when the destination list was created"},
			"modified_at":            schema.Int64Attribute{Computed: true, Description: "The date and time when the destination list was modified"},
			"is_msp_default":         schema.BoolAttribute{Computed: true, Description: "Specifies whether MSP is the default"},
			"marked_for_deletion":    schema.BoolAttribute{Computed: true, Description: "Specifies whether the destination list is marked for deletion"},
		},
	}
}

// Create creates a new destinationlists
func (r *DestinationlistsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan destinationlistsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Create API request
	createReq := DestinationListCreateRequest{
		Access:   plan.Access.ValueString(),
		IsGlobal: plan.IsGlobal.ValueBool(),
		Name:     plan.Name.ValueString(),
	}

	// Add optional bundle_type_id if provided
	if !plan.BundleTypeId.IsNull() && !plan.BundleTypeId.IsUnknown() {
		bundleTypeId := plan.BundleTypeId.ValueInt64()
		createReq.BundleTypeId = &bundleTypeId
	}

	// Call API
	result, err := r.client.CreateDestinationList(ctx, createReq)
	if err != nil {
		resp.Diagnostics.AddError("Failed to create destination list", err.Error())
		return
	}

	// Update state with response data
	plan.Id = types.StringValue(fmt.Sprintf("%d", result.Data.Id))
	plan.OrganizationId = types.Int64Value(result.Data.OrganizationId)
	plan.ThirdpartyCategoryId = types.Int64Value(result.Data.ThirdpartyCategoryId)
	plan.CreatedAt = types.Int64Value(result.Data.CreatedAt)
	plan.ModifiedAt = types.Int64Value(result.Data.ModifiedAt)
	plan.IsMspDefault = types.BoolValue(result.Data.IsMspDefault)
	plan.MarkedForDeletion = types.BoolValue(result.Data.MarkedForDeletion)
	plan.BundleTypeId = types.Int64Value(result.Data.BundleTypeId)

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Update updates the destinationlists
func (r *DestinationlistsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan destinationlistsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// TODO: Implement update logic using PATCH /destinationlists/{destinationListId}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the destinationlists
func (r *DestinationlistsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state destinationlistsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// TODO: Implement read logic - no specific read endpoint found

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete deletes the destinationlists
func (r *DestinationlistsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state destinationlistsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// TODO: Implement delete logic using DELETE /destinationlists/{destinationListId}
}
