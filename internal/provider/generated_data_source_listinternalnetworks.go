// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewListinternalnetworksDataSource)
}

// ListinternalnetworksDataSource implements the listinternalnetworks data source
type ListinternalnetworksDataSource struct {
	client *apiClient
}

// listinternalnetworksDataModel represents the data source data model
type listinternalnetworksDataModel struct {
	Id types.String `tfsdk:"id"`
}

// NewListinternalnetworksDataSource creates a new listinternalnetworks data source
func NewListinternalnetworksDataSource() datasource.DataSource {
	return &ListinternalnetworksDataSource{}
}

// Metadata returns the data source type name
func (d *ListinternalnetworksDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_listinternalnetworks"
}

// Configure configures the data source with the provider client
func (d *ListinternalnetworksDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *ListinternalnetworksDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "listinternalnetworks data source",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{Computed: true, Description: "Data source identifier"},
		},
	}
}

// Read reads the listinternalnetworks data
func (d *ListinternalnetworksDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config listinternalnetworksDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
