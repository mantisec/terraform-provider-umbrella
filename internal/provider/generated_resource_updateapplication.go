// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewUpdateapplicationResource)
}

// UpdateapplicationResource implements the updateapplication resource
type UpdateapplicationResource struct {
	client *apiClient
}

// updateapplicationModel represents the resource data model
type updateapplicationModel struct {
	Id              types.String `tfsdk:"id"`
	Label           types.String `tfsdk:"label"`
	Vendor          types.String `tfsdk:"vendor"`
	Sources         types.Set    `tfsdk:"sources"`
	Description     types.String `tfsdk:"description"`
	Category        types.String `tfsdk:"category"`
	IdentitiesCount types.Int64  `tfsdk:"identities_count"`
	FirstDetected   types.String `tfsdk:"first_detected"`
	LastDetected    types.String `tfsdk:"last_detected"`
	Name            types.String `tfsdk:"name"`
	WeightedRisk    types.String `tfsdk:"weighted_risk"`
	AppType         types.String `tfsdk:"app_type"`
	Url             types.String `tfsdk:"url"`
}

// NewUpdateapplicationResource creates a new updateapplication resource
func NewUpdateapplicationResource() resource.Resource {
	return &UpdateapplicationResource{}
}

// Metadata returns the resource type name
func (r *UpdateapplicationResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_updateapplication"
}

// Configure configures the resource with the provider client
func (r *UpdateapplicationResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *UpdateapplicationResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "updateapplication resource",
		Attributes: map[string]schema.Attribute{
			"id":               schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"label":            schema.StringAttribute{Required: true, Description: "The application label. Valid values are: `unreviewed`, `approved`, `notApproved`, `underAudit`."},
			"vendor":           schema.StringAttribute{Computed: true, Description: "The vendor that owns the app."},
			"sources":          schema.SetAttribute{Computed: true, Description: "The list of app sources where the sources are DNS, Web (Secure Web Gateway), and cloud-delivered firewall (CDFW) traffic events. The list can contain one or more of the source types.", ElementType: types.StringType},
			"description":      schema.StringAttribute{Computed: true, Description: "The description of the app."},
			"category":         schema.StringAttribute{Computed: true, Description: "The category applied to the app."},
			"identities_count": schema.Int64Attribute{Computed: true, Description: "The number of identities."},
			"first_detected":   schema.StringAttribute{Computed: true, Description: "The date and time (ISO 8601 timestamp) when the app was first detected."},
			"last_detected":    schema.StringAttribute{Computed: true, Description: "The date and time (ISO 8601 timestamp) when the app was last detected."},
			"name":             schema.StringAttribute{Computed: true, Description: "The name of the app."},
			"weighted_risk":    schema.StringAttribute{Computed: true, Description: "The risk the app poses to the environment."},
			"app_type":         schema.StringAttribute{Computed: true, Description: "The type of the app."},
			"url":              schema.StringAttribute{Computed: true, Description: "The URL of the app."},
		},
	}
}

// Create creates a new updateapplication
func (r *UpdateapplicationResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan updateapplicationModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific create endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No create endpoint configured for updateapplication")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the updateapplication
func (r *UpdateapplicationResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state updateapplicationModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the updateapplication
func (r *UpdateapplicationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan updateapplicationModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.Label.IsNull() {
		requestBody["label"] = plan.Label.ValueString()
	}

	// Build path with ID
	path := fmt.Sprintf("/appDiscovery/applications/{applicationId}", plan.Id.ValueString())

	// Make API call
	result, err := r.client.UpdateResource(ctx, path, requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update updateapplication, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["label"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Label = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["vendor"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Vendor = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["sources"]; exists && val != nil {
			}
			if val, exists := dataMap["description"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Description = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["category"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Category = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["identities_count"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.IdentitiesCount = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["first_detected"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.FirstDetected = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["last_detected"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.LastDetected = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Name = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["weighted_risk"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.WeightedRisk = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["app_type"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.AppType = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["url"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Url = types.StringValue(strVal)
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the updateapplication
func (r *UpdateapplicationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state updateapplicationModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for updateapplication")
}
