// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewUpdatecustomerdealsResource)
}

// UpdatecustomerdealsResource implements the updatecustomerdeals resource
type UpdatecustomerdealsResource struct {
	client *apiClient
}

// updatecustomerdealsModel represents the resource data model
type updatecustomerdealsModel struct {
	Id             types.String `tfsdk:"id"`
	Ccoid          types.Int64  `tfsdk:"ccoid"`
	CustomerId     types.Int64  `tfsdk:"customer_id"`
	QuoteId        types.Int64  `tfsdk:"quote_id"`
	MajorLineItems types.Set    `tfsdk:"major_line_items"`
	DealId         types.String `tfsdk:"deal_id"`
	EndCustomer    types.String `tfsdk:"end_customer"`
	CanStampDeal   types.Bool   `tfsdk:"can_stamp_deal"`
	TrialIds       types.Set    `tfsdk:"trial_ids"`
}

// NewUpdatecustomerdealsResource creates a new updatecustomerdeals resource
func NewUpdatecustomerdealsResource() resource.Resource {
	return &UpdatecustomerdealsResource{}
}

// Metadata returns the resource type name
func (r *UpdatecustomerdealsResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_updatecustomerdeals"
}

// Configure configures the resource with the provider client
func (r *UpdatecustomerdealsResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *UpdatecustomerdealsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "updatecustomerdeals resource",
		Attributes: map[string]schema.Attribute{
			"id":               schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"ccoid":            schema.Int64Attribute{Required: true, Description: "The ID of the user querying the deal ID."},
			"customer_id":      schema.Int64Attribute{Required: true, Description: "The ID for the customer."},
			"quote_id":         schema.Int64Attribute{Optional: true, Description: "The ID for the quote."},
			"major_line_items": schema.SetAttribute{Optional: true, ElementType: types.StringType},
			"deal_id":          schema.StringAttribute{Computed: true, Description: "The deal ID."},
			"end_customer":     schema.StringAttribute{Computed: true, Description: "The type of customer."},
			"can_stamp_deal":   schema.BoolAttribute{Computed: true, Description: "Specify whether to approve the deal."},
			"trial_ids":        schema.SetAttribute{Computed: true, Description: "The list of trial IDs.", ElementType: types.StringType},
		},
	}
}

// Create creates a new updatecustomerdeals
func (r *UpdatecustomerdealsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan updatecustomerdealsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific create endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No create endpoint configured for updatecustomerdeals")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the updatecustomerdeals
func (r *UpdatecustomerdealsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state updatecustomerdealsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the updatecustomerdeals
func (r *UpdatecustomerdealsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan updatecustomerdealsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.Ccoid.IsNull() {
		requestBody["ccoid"] = plan.Ccoid.ValueInt64()
	}
	if !plan.CustomerId.IsNull() {
		requestBody["customer_id"] = plan.CustomerId.ValueInt64()
	}
	if !plan.QuoteId.IsNull() {
		requestBody["quote_id"] = plan.QuoteId.ValueInt64()
	}
	if !plan.MajorLineItems.IsNull() {
		requestBody["major_line_items"] = plan.MajorLineItems.ValueString()
	}

	// Build path with ID
	path := fmt.Sprintf("/providers/customerDeals/{dealId}", plan.Id.ValueString())

	// Make API call
	result, err := r.client.UpdateResource(ctx, path, requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update updatecustomerdeals, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["ccoid"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.Ccoid = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["customer_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.CustomerId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["quote_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.QuoteId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["major_line_items"]; exists && val != nil {
			}
			if val, exists := dataMap["deal_id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.DealId = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["end_customer"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.EndCustomer = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["can_stamp_deal"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.CanStampDeal = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["trial_ids"]; exists && val != nil {
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the updatecustomerdeals
func (r *UpdatecustomerdealsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state updatecustomerdealsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for updatecustomerdeals")
}
