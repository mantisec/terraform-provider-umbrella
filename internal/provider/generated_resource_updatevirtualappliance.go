// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewUpdatevirtualapplianceResource)
}

// UpdatevirtualapplianceResource implements the updatevirtualappliance resource
type UpdatevirtualapplianceResource struct {
	client *apiClient
}

// updatevirtualapplianceModel represents the resource data model
type updatevirtualapplianceModel struct {
	Id                              types.String `tfsdk:"id"`
	SiteId                          types.Int64  `tfsdk:"site_id"`
	OriginId                        types.Int64  `tfsdk:"origin_id"`
	Name                            types.String `tfsdk:"name"`
	StateHasLocalDomainConfigured   types.String `tfsdk:"state_has_local_domain_configured"`
	StateQueryFailureRateAcceptable types.String `tfsdk:"state_query_failure_rate_acceptable"`
	StateReceivedInternalDNSQueries types.String `tfsdk:"state_received_internal_d_n_s_queries"`
	StateRedundantWithinSite        types.String `tfsdk:"state_redundant_within_site"`
	StateSyncing                    types.String `tfsdk:"state_syncing"`
	StateConnectedToConnector       types.String `tfsdk:"state_connected_to_connector"`
	Health                          types.String `tfsdk:"health"`
	Type                            types.String `tfsdk:"type"`
	SettingsHostType                types.String `tfsdk:"settings_host_type"`
	SettingsUptime                  types.Int64  `tfsdk:"settings_uptime"`
	SettingsIsDnscryptEnabled       types.Bool   `tfsdk:"settings_is_dnscrypt_enabled"`
	SettingsUpgradeError            types.String `tfsdk:"settings_upgrade_error"`
	SettingsLastSyncTime            types.String `tfsdk:"settings_last_sync_time"`
	SettingsInternalIPs             types.Set    `tfsdk:"settings_internal_i_ps"`
	SettingsExternalIP              types.String `tfsdk:"settings_external_i_p"`
	SettingsVersion                 types.String `tfsdk:"settings_version"`
	SettingsDomains                 types.Set    `tfsdk:"settings_domains"`
	StateUpdatedAt                  types.String `tfsdk:"state_updated_at"`
	IsUpgradable                    types.Bool   `tfsdk:"is_upgradable"`
	CreatedAt                       types.String `tfsdk:"created_at"`
	ModifiedAt                      types.String `tfsdk:"modified_at"`
}

// NewUpdatevirtualapplianceResource creates a new updatevirtualappliance resource
func NewUpdatevirtualapplianceResource() resource.Resource {
	return &UpdatevirtualapplianceResource{}
}

// Metadata returns the resource type name
func (r *UpdatevirtualapplianceResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_updatevirtualappliance"
}

// Configure configures the resource with the provider client
func (r *UpdatevirtualapplianceResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *UpdatevirtualapplianceResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "updatevirtualappliance resource",
		Attributes: map[string]schema.Attribute{
			"id":                                    schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"site_id":                               schema.Int64Attribute{Required: true, Description: "The ID of the site."},
			"origin_id":                             schema.Int64Attribute{Computed: true, Description: "The origin ID of the virtual appliance."},
			"name":                                  schema.StringAttribute{Computed: true, Description: "The name of the virtual appliance."},
			"state_has_local_domain_configured":     schema.StringAttribute{Computed: true, Description: "The virtual appliance has local domain configuration."},
			"state_query_failure_rate_acceptable":   schema.StringAttribute{Computed: true, Description: "The failure rate of the query for the virtual appliance is acceptable."},
			"state_received_internal_d_n_s_queries": schema.StringAttribute{Computed: true, Description: "The virtual appliance received internal DNS queries."},
			"state_redundant_within_site":           schema.StringAttribute{Computed: true, Description: "The virtual appliance is redundant within site."},
			"state_syncing":                         schema.StringAttribute{Computed: true, Description: "The virtual appliance is syncing."},
			"state_connected_to_connector":          schema.StringAttribute{Computed: true, Description: "The virtual appliance that is connected to the connector status."},
			"health":                                schema.StringAttribute{Computed: true, Description: "A description of the health of the virtual appliance."},
			"type":                                  schema.StringAttribute{Computed: true, Description: "The type of the virtual appliance."},
			"settings_host_type":                    schema.StringAttribute{Computed: true, Description: "The type of the host."},
			"settings_uptime":                       schema.Int64Attribute{Computed: true, Description: "The uptime in seconds."},
			"settings_is_dnscrypt_enabled":          schema.BoolAttribute{Computed: true, Description: "Specifies whether DNSCrypt is enabled."},
			"settings_upgrade_error":                schema.StringAttribute{Computed: true, Description: "Specifies the upgrade error."},
			"settings_last_sync_time":               schema.StringAttribute{Computed: true, Description: "The date and time (ISO8601 timestamp) of the last sync."},
			"settings_internal_i_ps":                schema.SetAttribute{Computed: true, Description: "A list of internal IP addresses.", ElementType: types.StringType},
			"settings_external_i_p":                 schema.StringAttribute{Computed: true, Description: "The external IP address."},
			"settings_version":                      schema.StringAttribute{Computed: true, Description: "Specifies the version of the virtual appliance."},
			"settings_domains":                      schema.SetAttribute{Computed: true, Description: "The list of domains.", ElementType: types.StringType},
			"state_updated_at":                      schema.StringAttribute{Computed: true, Description: "The date and time (ISO8601 timestamp) when the virtual appliance's state was updated."},
			"is_upgradable":                         schema.BoolAttribute{Computed: true, Description: "Specifies whether you can upgrade the virtual appliance (VA) to the latest VA version."},
			"created_at":                            schema.StringAttribute{Computed: true, Description: "The date and time (ISO8601 timestamp) when the VA was created."},
			"modified_at":                           schema.StringAttribute{Computed: true, Description: "The date and time (ISO8601 timestamp) when the VA was modified."},
		},
	}
}

// Create creates a new updatevirtualappliance
func (r *UpdatevirtualapplianceResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan updatevirtualapplianceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific create endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No create endpoint configured for updatevirtualappliance")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the updatevirtualappliance
func (r *UpdatevirtualapplianceResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state updatevirtualapplianceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the updatevirtualappliance
func (r *UpdatevirtualapplianceResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan updatevirtualapplianceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.SiteId.IsNull() {
		requestBody["site_id"] = plan.SiteId.ValueInt64()
	}

	// Build path with ID
	path := fmt.Sprintf("/virtualappliances/{virtualApplianceId}", plan.Id.ValueString())

	// Make API call
	result, err := r.client.UpdateResource(ctx, path, requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update updatevirtualappliance, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["site_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.SiteId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["origin_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OriginId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Name = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["state_has_local_domain_configured"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StateHasLocalDomainConfigured = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["state_query_failure_rate_acceptable"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StateQueryFailureRateAcceptable = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["state_received_internal_d_n_s_queries"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StateReceivedInternalDNSQueries = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["state_redundant_within_site"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StateRedundantWithinSite = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["state_syncing"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StateSyncing = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["state_connected_to_connector"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StateConnectedToConnector = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["health"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Health = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["type"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Type = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_host_type"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SettingsHostType = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_uptime"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.SettingsUptime = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["settings_is_dnscrypt_enabled"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.SettingsIsDnscryptEnabled = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["settings_upgrade_error"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SettingsUpgradeError = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_last_sync_time"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SettingsLastSyncTime = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_internal_i_ps"]; exists && val != nil {
			}
			if val, exists := dataMap["settings_external_i_p"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SettingsExternalIP = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_version"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SettingsVersion = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_domains"]; exists && val != nil {
			}
			if val, exists := dataMap["state_updated_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StateUpdatedAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["is_upgradable"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.IsUpgradable = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["created_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CreatedAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["modified_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ModifiedAt = types.StringValue(strVal)
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the updatevirtualappliance
func (r *UpdatevirtualapplianceResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state updatevirtualapplianceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for updatevirtualappliance")
}
