// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewCreateuserResource)
}

// CreateuserResource implements the createuser resource
type CreateuserResource struct {
	client *apiClient
}

// createuserModel represents the resource data model
type createuserModel struct {
	Id              types.String `tfsdk:"id"`
	Email           types.String `tfsdk:"email"`
	Password        types.String `tfsdk:"password"`
	RoleId          types.Int64  `tfsdk:"role_id"`
	Timezone        types.String `tfsdk:"timezone"`
	Firstname       types.String `tfsdk:"firstname"`
	Lastname        types.String `tfsdk:"lastname"`
	LastLoginTime   types.String `tfsdk:"last_login_time"`
	TwoFactorEnable types.Bool   `tfsdk:"two_factor_enable"`
	Role            types.String `tfsdk:"role"`
}

// NewCreateuserResource creates a new createuser resource
func NewCreateuserResource() resource.Resource {
	return &CreateuserResource{}
}

// Metadata returns the resource type name
func (r *CreateuserResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_createuser"
}

// Configure configures the resource with the provider client
func (r *CreateuserResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *CreateuserResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "createuser resource",
		Attributes: map[string]schema.Attribute{
			"id":                schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"email":             schema.StringAttribute{Required: true, Description: "The user's email address."},
			"password":          schema.StringAttribute{Required: true, Description: "The user's password."},
			"role_id":           schema.Int64Attribute{Required: true, Description: "The role ID."},
			"timezone":          schema.StringAttribute{Required: true, Description: "The user's timezone."},
			"firstname":         schema.StringAttribute{Required: true, Description: "The user's first name."},
			"lastname":          schema.StringAttribute{Required: true, Description: "The user's last name."},
			"last_login_time":   schema.StringAttribute{Computed: true, Description: "The user's last login date and time (ISO8601 timestamp)."},
			"two_factor_enable": schema.BoolAttribute{Computed: true, Description: "Specifies whether two-factor authentication is enabled."},
			"role":              schema.StringAttribute{Computed: true, Description: "The user's role."},
		},
	}
}

// Create creates a new createuser
func (r *CreateuserResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan createuserModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.Email.IsNull() {
		requestBody["email"] = plan.Email.ValueString()
	}
	if !plan.Password.IsNull() {
		requestBody["password"] = plan.Password.ValueString()
	}
	if !plan.RoleId.IsNull() {
		requestBody["role_id"] = plan.RoleId.ValueInt64()
	}
	if !plan.Timezone.IsNull() {
		requestBody["timezone"] = plan.Timezone.ValueString()
	}
	if !plan.Firstname.IsNull() {
		requestBody["firstname"] = plan.Firstname.ValueString()
	}
	if !plan.Lastname.IsNull() {
		requestBody["lastname"] = plan.Lastname.ValueString()
	}

	// Make API call
	result, err := r.client.CreateResource(ctx, "/users", requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create createuser, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["email"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Email = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["password"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Password = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["role_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.RoleId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["timezone"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Timezone = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["firstname"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Firstname = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["lastname"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Lastname = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["last_login_time"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.LastLoginTime = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["two_factor_enable"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.TwoFactorEnable = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["role"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Role = types.StringValue(strVal)
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the createuser
func (r *CreateuserResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state createuserModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the createuser
func (r *CreateuserResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan createuserModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific update endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No update endpoint configured for createuser")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the createuser
func (r *CreateuserResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state createuserModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for createuser")
}
