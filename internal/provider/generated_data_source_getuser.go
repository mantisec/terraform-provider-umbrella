// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetuserDataSource)
}

// GetuserDataSource implements the getuser data source
type GetuserDataSource struct {
	client *apiClient
}

// getuserDataModel represents the data source data model
type getuserDataModel struct {
	Id              types.String `tfsdk:"id"`
	Lastname        types.String `tfsdk:"lastname"`
	Email           types.String `tfsdk:"email"`
	Roleid          types.Int64  `tfsdk:"roleId"`
	Status          types.String `tfsdk:"status"`
	Lastlogintime   types.String `tfsdk:"lastLoginTime"`
	Twofactorenable types.Bool   `tfsdk:"twoFactorEnable"`
	Firstname       types.String `tfsdk:"firstname"`
	Role            types.String `tfsdk:"role"`
	Timezone        types.String `tfsdk:"timezone"`
	Password        types.String `tfsdk:"password"`
}

// NewGetuserDataSource creates a new getuser data source
func NewGetuserDataSource() datasource.DataSource {
	return &GetuserDataSource{}
}

// Metadata returns the data source type name
func (d *GetuserDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getuser"
}

// Configure configures the data source with the provider client
func (d *GetuserDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetuserDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getuser data source",
		Attributes: map[string]schema.Attribute{
			"id":              schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"lastname":        schema.StringAttribute{Computed: true, Description: "The user's last name."},
			"email":           schema.StringAttribute{Computed: true, Description: "The user's email address."},
			"roleId":          schema.Int64Attribute{Computed: true, Description: "The role ID."},
			"status":          schema.StringAttribute{Computed: true, Description: "The user's status."},
			"lastLoginTime":   schema.StringAttribute{Computed: true, Description: "The user's last login date and time (ISO8601 timestamp)."},
			"twoFactorEnable": schema.BoolAttribute{Computed: true, Description: "Specifies whether two-factor authentication is enabled."},
			"firstname":       schema.StringAttribute{Computed: true, Description: "The user's first name."},
			"role":            schema.StringAttribute{Computed: true, Description: "The user's role."},
			"timezone":        schema.StringAttribute{Computed: true, Description: "The user's timezone."},
			"password":        schema.StringAttribute{Computed: true, Description: "The user's password."},
		},
	}
}

// Read reads the getuser data
func (d *GetuserDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getuserDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
