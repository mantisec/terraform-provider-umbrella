// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewCreates3bucketkeyResource)
}

// Creates3bucketkeyResource implements the creates3bucketkey resource
type Creates3bucketkeyResource struct {
	client *apiClient
}

// creates3bucketkeyModel represents the resource data model
type creates3bucketkeyModel struct {
	Id              types.String `tfsdk:"id"`
	SecretAccessKey types.String `tfsdk:"secret_access_key"`
	KeyCreationDate types.String `tfsdk:"key_creation_date"`
	OldKeyId        types.String `tfsdk:"old_key_id"`
	CurrentKeyId    types.String `tfsdk:"current_key_id"`
}

// NewCreates3bucketkeyResource creates a new creates3bucketkey resource
func NewCreates3bucketkeyResource() resource.Resource {
	return &Creates3bucketkeyResource{}
}

// Metadata returns the resource type name
func (r *Creates3bucketkeyResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_creates3bucketkey"
}

// Configure configures the resource with the provider client
func (r *Creates3bucketkeyResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *Creates3bucketkeyResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "creates3bucketkey resource",
		Attributes: map[string]schema.Attribute{
			"id":                schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"secret_access_key": schema.StringAttribute{Required: true, Description: "The secret for the Cisco-managed S3 bucket key."},
			"key_creation_date": schema.StringAttribute{Required: true, Description: "The date and time (ISO 8601-formatted timestamp) when the system created the Cisco-managed S3 bucket key."},
			"old_key_id":        schema.StringAttribute{Required: true, Description: "The previous ID of the Cisco-managed S3 bucket key."},
			"current_key_id":    schema.StringAttribute{Required: true, Description: "The ID of the Cisco-managed S3 bucket key."},
		},
	}
}

// Create creates a new creates3bucketkey
func (r *Creates3bucketkeyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan creates3bucketkeyModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.SecretAccessKey.IsNull() {
		requestBody["secret_access_key"] = plan.SecretAccessKey.ValueString()
	}
	if !plan.KeyCreationDate.IsNull() {
		requestBody["key_creation_date"] = plan.KeyCreationDate.ValueString()
	}
	if !plan.OldKeyId.IsNull() {
		requestBody["old_key_id"] = plan.OldKeyId.ValueString()
	}
	if !plan.CurrentKeyId.IsNull() {
		requestBody["current_key_id"] = plan.CurrentKeyId.ValueString()
	}

	// Make API call
	result, err := r.client.CreateResource(ctx, "/iam/rotateKey", requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create creates3bucketkey, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["secret_access_key"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SecretAccessKey = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["key_creation_date"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.KeyCreationDate = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["old_key_id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.OldKeyId = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["current_key_id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CurrentKeyId = types.StringValue(strVal)
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the creates3bucketkey
func (r *Creates3bucketkeyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state creates3bucketkeyModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the creates3bucketkey
func (r *Creates3bucketkeyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan creates3bucketkeyModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific update endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No update endpoint configured for creates3bucketkey")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the creates3bucketkey
func (r *Creates3bucketkeyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state creates3bucketkeyModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for creates3bucketkey")
}
