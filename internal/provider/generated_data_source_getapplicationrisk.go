// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetapplicationriskDataSource)
}

// GetapplicationriskDataSource implements the getapplicationrisk data source
type GetapplicationriskDataSource struct {
	client *apiClient
}

// getapplicationriskDataModel represents the data source data model
type getapplicationriskDataModel struct {
	Id                 types.String `tfsdk:"id"`
	Name               types.String `tfsdk:"name"`
	Businessrisk       types.String `tfsdk:"businessRisk"`
	Webreputation      types.Int64  `tfsdk:"webReputation"`
	Financialviability types.String `tfsdk:"financialViability"`
	Datastorage        types.String `tfsdk:"dataStorage"`
	Weightedrisk       types.String `tfsdk:"weightedRisk"`
	Usagetype          types.String `tfsdk:"usageType"`
	Vendorcompliance   types.Set    `tfsdk:"vendorCompliance"`
}

// NewGetapplicationriskDataSource creates a new getapplicationrisk data source
func NewGetapplicationriskDataSource() datasource.DataSource {
	return &GetapplicationriskDataSource{}
}

// Metadata returns the data source type name
func (d *GetapplicationriskDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getapplicationrisk"
}

// Configure configures the data source with the provider client
func (d *GetapplicationriskDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetapplicationriskDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getapplicationrisk data source",
		Attributes: map[string]schema.Attribute{
			"id":                 schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"name":               schema.StringAttribute{Computed: true, Description: "The name of the app."},
			"businessRisk":       schema.StringAttribute{Computed: true, Description: "The business risk of the app."},
			"webReputation":      schema.Int64Attribute{Computed: true, Description: "Provides accurate conclusions about a given host by tracking a broad set of attributes and using sophisticated security modeling. Powered by Talos Security Intelligence."},
			"financialViability": schema.StringAttribute{Computed: true, Description: "Financial risk to the service provider, based on Dun & Bradstreet's Dynamic Risk Score."},
			"dataStorage":        schema.StringAttribute{Computed: true, Description: "The form of the stored data. Valid values are: `noStorage`, `structured`, `unstructured`, or `na`."},
			"weightedRisk":       schema.StringAttribute{Computed: true, Description: "The risk the app poses to the environment."},
			"usageType":          schema.StringAttribute{Computed: true, Description: "The type of usage. Valid values are: `personal`, `corporate` (higher risk), or `indirect` (lower risk, e.g. content delivery network)."},
			"vendorCompliance":   schema.SetAttribute{Computed: true, Description: "The list of compliance information for the vendor.", ElementType: types.StringType},
		},
	}
}

// Read reads the getapplicationrisk data
func (d *GetapplicationriskDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getapplicationriskDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
