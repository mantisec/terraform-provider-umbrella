// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewCreatenetworkdeviceResource)
}

// CreatenetworkdeviceResource implements the createnetworkdevice resource
type CreatenetworkdeviceResource struct {
	client *apiClient
}

// createnetworkdeviceModel represents the resource data model
type createnetworkdeviceModel struct {
	Id             types.String `tfsdk:"id"`
	MacAddress     types.String `tfsdk:"mac_address"`
	Name           types.String `tfsdk:"name"`
	SerialNumber   types.String `tfsdk:"serial_number"`
	Tag            types.String `tfsdk:"tag"`
	Model          types.String `tfsdk:"model"`
	CreatedAt      types.String `tfsdk:"created_at"`
	OrganizationId types.Int64  `tfsdk:"organization_id"`
	OriginId       types.Int64  `tfsdk:"origin_id"`
	DeviceId       types.String `tfsdk:"device_id"`
	DeviceKey      types.String `tfsdk:"device_key"`
}

// NewCreatenetworkdeviceResource creates a new createnetworkdevice resource
func NewCreatenetworkdeviceResource() resource.Resource {
	return &CreatenetworkdeviceResource{}
}

// Metadata returns the resource type name
func (r *CreatenetworkdeviceResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_createnetworkdevice"
}

// Configure configures the resource with the provider client
func (r *CreatenetworkdeviceResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *CreatenetworkdeviceResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "createnetworkdevice resource",
		Attributes: map[string]schema.Attribute{
			"id":              schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"mac_address":     schema.StringAttribute{Required: true, Description: "The MAC address of the device. The unique MAC address may include up to 12 characters and must not contain hyphens or colons."},
			"name":            schema.StringAttribute{Required: true, Description: "The name of the device. The name is a sequence of characters with a length from 1 through 50. The name must be unique in your organization."},
			"serial_number":   schema.StringAttribute{Required: true, Description: "The serial number of the device."},
			"tag":             schema.StringAttribute{Optional: true, Description: "A text tag that describes the device or this origin, which is assigned to the device. Provide a tag that is unique to your organization."},
			"model":           schema.StringAttribute{Required: true, Description: "The model name of the device. Must be unique to your organization."},
			"created_at":      schema.StringAttribute{Computed: true, Description: "The time when the device was created. Specify an ISO 8601-formatted timestamp."},
			"organization_id": schema.Int64Attribute{Computed: true, Description: "The ID of the organization."},
			"origin_id":       schema.Int64Attribute{Computed: true, Description: "The unique global identifier for this traffic source (origin). Use the origin ID to manage the device. The origin ID is not used by the device."},
			"device_id":       schema.StringAttribute{Computed: true, Description: "The unique identifier for the specific network device. Insert the identifier into the EDNS packets."},
			"device_key":      schema.StringAttribute{Computed: true, Description: "A descriptive unique identifier for the device. Not used by the device."},
		},
	}
}

// Create creates a new createnetworkdevice
func (r *CreatenetworkdeviceResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan createnetworkdeviceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.MacAddress.IsNull() {
		requestBody["mac_address"] = plan.MacAddress.ValueString()
	}
	if !plan.Name.IsNull() {
		requestBody["name"] = plan.Name.ValueString()
	}
	if !plan.SerialNumber.IsNull() {
		requestBody["serial_number"] = plan.SerialNumber.ValueString()
	}
	if !plan.Tag.IsNull() {
		requestBody["tag"] = plan.Tag.ValueString()
	}
	if !plan.Model.IsNull() {
		requestBody["model"] = plan.Model.ValueString()
	}

	// Make API call
	result, err := r.client.CreateResource(ctx, "/networkdevices", requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create createnetworkdevice, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["mac_address"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.MacAddress = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Name = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["serial_number"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SerialNumber = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["tag"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Tag = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["model"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Model = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["created_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CreatedAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["organization_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OrganizationId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["origin_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OriginId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["device_id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.DeviceId = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["device_key"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.DeviceKey = types.StringValue(strVal)
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the createnetworkdevice
func (r *CreatenetworkdeviceResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state createnetworkdeviceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the createnetworkdevice
func (r *CreatenetworkdeviceResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan createnetworkdeviceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific update endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No update endpoint configured for createnetworkdevice")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the createnetworkdevice
func (r *CreatenetworkdeviceResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state createnetworkdeviceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for createnetworkdevice")
}
