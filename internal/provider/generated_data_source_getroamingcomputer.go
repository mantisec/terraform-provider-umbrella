// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetroamingcomputerDataSource)
}

// GetroamingcomputerDataSource implements the getroamingcomputer data source
type GetroamingcomputerDataSource struct {
	client *apiClient
}

// getroamingcomputerDataModel represents the data source data model
type getroamingcomputerDataModel struct {
	Id                 types.String `tfsdk:"id"`
	Version            types.String `tfsdk:"version"`
	Osversionname      types.String `tfsdk:"osVersionName"`
	Anyconnectdeviceid types.String `tfsdk:"anyconnectDeviceId"`
	Lastsync           types.String `tfsdk:"lastSync"`
	Hasipblocking      types.Bool   `tfsdk:"hasIpBlocking"`
	Swgstatus          types.String `tfsdk:"swgStatus"`
	Osversion          types.String `tfsdk:"osVersion"`
	Deviceid           types.String `tfsdk:"deviceId"`
	Type               types.String `tfsdk:"type"`
	Lastsyncswgstatus  types.String `tfsdk:"lastSyncSwgStatus"`
	Appliedbundle      types.Int64  `tfsdk:"appliedBundle"`
	Originid           types.Int64  `tfsdk:"originId"`
	Status             types.String `tfsdk:"status"`
	Name               types.String `tfsdk:"name"`
	Lastsyncstatus     types.String `tfsdk:"lastSyncStatus"`
}

// NewGetroamingcomputerDataSource creates a new getroamingcomputer data source
func NewGetroamingcomputerDataSource() datasource.DataSource {
	return &GetroamingcomputerDataSource{}
}

// Metadata returns the data source type name
func (d *GetroamingcomputerDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getroamingcomputer"
}

// Configure configures the data source with the provider client
func (d *GetroamingcomputerDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetroamingcomputerDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getroamingcomputer data source",
		Attributes: map[string]schema.Attribute{
			"id":                 schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"version":            schema.StringAttribute{Computed: true, Description: "The version of the Cisco Secure Client with the Internet Security module deployed on the roaming computer."},
			"osVersionName":      schema.StringAttribute{Computed: true, Description: "The OS version name of the roaming computer."},
			"anyconnectDeviceId": schema.StringAttribute{Computed: true, Description: "The ID of the device that has the Cisco Secure Client deployed with the Internet Security module."},
			"lastSync":           schema.StringAttribute{Computed: true, Description: "The date and time (timestamp) of the last sync."},
			"hasIpBlocking":      schema.BoolAttribute{Computed: true, Description: "Specifies whether the roaming computer has IP blocking."},
			"swgStatus":          schema.StringAttribute{Computed: true, Description: "The status of the roaming computer with Internet security (Secure Web Gateway)."},
			"osVersion":          schema.StringAttribute{Computed: true, Description: "The OS version of the roaming computer."},
			"deviceId":           schema.StringAttribute{Computed: true, Description: "The hex ID of the roaming computer."},
			"type":               schema.StringAttribute{Computed: true, Description: "The type of the roaming computer."},
			"lastSyncSwgStatus":  schema.StringAttribute{Computed: true, Description: "The status of the last sync on the roaming computer with Internet security (Secure Web Gateway)."},
			"appliedBundle":      schema.Int64Attribute{Computed: true, Description: "The policy ID."},
			"originId":           schema.Int64Attribute{Computed: true, Description: "The origin ID for the roaming computer."},
			"status":             schema.StringAttribute{Computed: true, Description: "The status of the roaming computer with DNS-layer security."},
			"name":               schema.StringAttribute{Computed: true, Description: "The name of the roaming computer. `name` is a sequence of 1â€“50 characters."},
			"lastSyncStatus":     schema.StringAttribute{Computed: true, Description: "The status of the last sync on the roaming computer with DNS-layer security."},
		},
	}
}

// Read reads the getroamingcomputer data
func (d *GetroamingcomputerDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getroamingcomputerDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
