// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewCreatenetworkResource)
}

// CreatenetworkResource implements the createnetwork resource
type CreatenetworkResource struct {
	client *apiClient
}

// createnetworkModel represents the resource data model
type createnetworkModel struct {
	Id           types.String `tfsdk:"id"`
	Name         types.String `tfsdk:"name"`
	IpAddress    types.String `tfsdk:"ip_address"`
	PrefixLength types.Int64  `tfsdk:"prefix_length"`
	IsDynamic    types.Bool   `tfsdk:"is_dynamic"`
	IsVerified   types.Bool   `tfsdk:"is_verified"`
	CreatedAt    types.String `tfsdk:"created_at"`
	OriginId     types.Int64  `tfsdk:"origin_id"`
}

// NewCreatenetworkResource creates a new createnetwork resource
func NewCreatenetworkResource() resource.Resource {
	return &CreatenetworkResource{}
}

// Metadata returns the resource type name
func (r *CreatenetworkResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_createnetwork"
}

// Configure configures the resource with the provider client
func (r *CreatenetworkResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *CreatenetworkResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "createnetwork resource",
		Attributes: map[string]schema.Attribute{
			"id":            schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"name":          schema.StringAttribute{Required: true, Description: "The name of the network."},
			"ip_address":    schema.StringAttribute{Optional: true, Description: "The IP address of the network."},
			"prefix_length": schema.Int64Attribute{Required: true, Description: "The length of the prefix. Set a prefix length that is greater than 28 and less than 33."},
			"is_dynamic":    schema.BoolAttribute{Required: true, Description: "Specifies whether the IP is dynamic."},
			"is_verified":   schema.BoolAttribute{Computed: true, Description: "Specifies whether the network is verified."},
			"created_at":    schema.StringAttribute{Computed: true, Description: "The date and time (timestamp) when the network was created."},
			"origin_id":     schema.Int64Attribute{Computed: true, Description: "The origin ID."},
		},
	}
}

// Create creates a new createnetwork
func (r *CreatenetworkResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan createnetworkModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.Name.IsNull() {
		requestBody["name"] = plan.Name.ValueString()
	}
	if !plan.IpAddress.IsNull() {
		requestBody["ip_address"] = plan.IpAddress.ValueString()
	}
	if !plan.PrefixLength.IsNull() {
		requestBody["prefix_length"] = plan.PrefixLength.ValueInt64()
	}
	if !plan.IsDynamic.IsNull() {
		requestBody["is_dynamic"] = plan.IsDynamic.ValueBool()
	}

	// Make API call
	result, err := r.client.CreateResource(ctx, "/networks", requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create createnetwork, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Name = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["ip_address"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.IpAddress = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["prefix_length"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.PrefixLength = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["is_dynamic"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.IsDynamic = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["is_verified"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.IsVerified = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["created_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CreatedAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["origin_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OriginId = types.Int64Value(int64(floatVal))
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the createnetwork
func (r *CreatenetworkResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state createnetworkModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the createnetwork
func (r *CreatenetworkResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan createnetworkModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific update endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No update endpoint configured for createnetwork")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the createnetwork
func (r *CreatenetworkResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state createnetworkModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for createnetwork")
}
