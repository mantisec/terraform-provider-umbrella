// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetsiteDataSource)
}

// GetsiteDataSource implements the getsite data source
type GetsiteDataSource struct {
	client *apiClient
}

// getsiteDataModel represents the data source data model
type getsiteDataModel struct {
	Id                   types.String `tfsdk:"id"`
	Originid             types.Int64  `tfsdk:"originId"`
	Name                 types.String `tfsdk:"name"`
	Internalnetworkcount types.Int64  `tfsdk:"internalNetworkCount"`
	Vacount              types.Int64  `tfsdk:"vaCount"`
	Createdat            types.String `tfsdk:"createdAt"`
	Siteid               types.Int64  `tfsdk:"siteId"`
	Isdefault            types.Bool   `tfsdk:"isDefault"`
	Type                 types.String `tfsdk:"type"`
	Modifiedat           types.String `tfsdk:"modifiedAt"`
}

// NewGetsiteDataSource creates a new getsite data source
func NewGetsiteDataSource() datasource.DataSource {
	return &GetsiteDataSource{}
}

// Metadata returns the data source type name
func (d *GetsiteDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getsite"
}

// Configure configures the data source with the provider client
func (d *GetsiteDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetsiteDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getsite data source",
		Attributes: map[string]schema.Attribute{
			"id":                   schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"originId":             schema.Int64Attribute{Computed: true, Description: "The origin ID of the site."},
			"name":                 schema.StringAttribute{Computed: true, Description: "The name of the site."},
			"internalNetworkCount": schema.Int64Attribute{Computed: true, Description: "The number of internal networks that are attached to the site."},
			"vaCount":              schema.Int64Attribute{Computed: true, Description: "The number of virtual appliances that are attached to the site."},
			"createdAt":            schema.StringAttribute{Computed: true, Description: "The date and time (ISO 8601 timestamp) when the site was created."},
			"siteId":               schema.Int64Attribute{Computed: true, Description: "The ID of the site."},
			"isDefault":            schema.BoolAttribute{Computed: true, Description: "Specifies whether the site is the default."},
			"type":                 schema.StringAttribute{Computed: true, Description: "The type of the site."},
			"modifiedAt":           schema.StringAttribute{Computed: true, Description: "The date and time (ISO 8601 timestamp) when the site was modified."},
		},
	}
}

// Read reads the getsite data
func (d *GetsiteDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getsiteDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
