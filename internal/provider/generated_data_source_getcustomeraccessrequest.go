// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetcustomeraccessrequestDataSource)
}

// GetcustomeraccessrequestDataSource implements the getcustomeraccessrequest data source
type GetcustomeraccessrequestDataSource struct {
	client *apiClient
}

// getcustomeraccessrequestDataModel represents the data source data model
type getcustomeraccessrequestDataModel struct {
	Id               types.String `tfsdk:"id"`
	State            types.String `tfsdk:"state"`
	Displayat        types.Int64  `tfsdk:"displayAt"`
	Createdat        types.Int64  `tfsdk:"createdAt"`
	Modifiedat       types.Int64  `tfsdk:"modifiedAt"`
	Organizationname types.String `tfsdk:"organizationName"`
	Organizationid   types.Int64  `tfsdk:"organizationId"`
}

// NewGetcustomeraccessrequestDataSource creates a new getcustomeraccessrequest data source
func NewGetcustomeraccessrequestDataSource() datasource.DataSource {
	return &GetcustomeraccessrequestDataSource{}
}

// Metadata returns the data source type name
func (d *GetcustomeraccessrequestDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getcustomeraccessrequest"
}

// Configure configures the data source with the provider client
func (d *GetcustomeraccessrequestDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetcustomeraccessrequestDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getcustomeraccessrequest data source",
		Attributes: map[string]schema.Attribute{
			"id":               schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"state":            schema.StringAttribute{Computed: true, Description: "The current state of the access request."},
			"displayAt":        schema.Int64Attribute{Computed: true, Description: "The time when the logo was created. Specify the time in milliseconds."},
			"createdAt":        schema.Int64Attribute{Computed: true, Description: "The time when the logo was created. Specify the time in milliseconds."},
			"modifiedAt":       schema.Int64Attribute{Computed: true, Description: "The time when the logo was last modified. Specify the time in milliseconds."},
			"organizationName": schema.StringAttribute{Computed: true, Description: "The name of the organization that created the access request."},
			"organizationId":   schema.Int64Attribute{Computed: true, Description: "The ID of the organization that created the access request."},
		},
	}
}

// Read reads the getcustomeraccessrequest data
func (d *GetcustomeraccessrequestDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getcustomeraccessrequestDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
