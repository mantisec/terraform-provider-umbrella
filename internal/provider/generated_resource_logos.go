// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewLogosResource)
}

// LogosResource implements the logos resource
type LogosResource struct {
	client *apiClient
}

// logosModel represents the resource data model
type logosModel struct {
	Id             types.String `tfsdk:"id"`
	Name           types.String `tfsdk:"name"`
	Description    types.String `tfsdk:"description"`
	Enabled        types.Bool   `tfsdk:"enabled"`
	Active         types.Bool   `tfsdk:"active"`
	Status         types.String `tfsdk:"status"`
	OrganizationId types.Int64  `tfsdk:"organization_id"`
	CreatedAt      types.Int64  `tfsdk:"created_at"`
	ModifiedAt     types.Int64  `tfsdk:"modified_at"`
	UpdatedAt      types.Int64  `tfsdk:"updated_at"`
	CreatedBy      types.String `tfsdk:"created_by"`
	ModifiedBy     types.String `tfsdk:"modified_by"`
}

// NewLogosResource creates a new logos resource
func NewLogosResource() resource.Resource {
	return &LogosResource{}
}

// Metadata returns the resource type name
func (r *LogosResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_logos"
}

// Configure configures the resource with the provider client
func (r *LogosResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *LogosResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "logos resource",
		Attributes: map[string]schema.Attribute{
			"id":              schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"name":            schema.StringAttribute{Required: true, Description: "The name of the resource"},
			"description":     schema.StringAttribute{Optional: true, Description: "The description of the resource"},
			"enabled":         schema.BoolAttribute{Optional: true, Description: "Whether the resource is enabled"},
			"active":          schema.BoolAttribute{Optional: true, Description: "Whether the resource is active"},
			"status":          schema.StringAttribute{Computed: true, Description: "The status of the resource"},
			"organization_id": schema.Int64Attribute{Computed: true, Description: "The organization ID"},
			"created_at":      schema.Int64Attribute{Computed: true, Description: "The date and time when the resource was created"},
			"modified_at":     schema.Int64Attribute{Computed: true, Description: "The date and time when the resource was modified"},
			"updated_at":      schema.Int64Attribute{Computed: true, Description: "The date and time when the resource was updated"},
			"created_by":      schema.StringAttribute{Computed: true, Description: "The user who created the resource"},
			"modified_by":     schema.StringAttribute{Computed: true, Description: "The user who modified the resource"},
		},
	}
}

// Create creates a new logos
func (r *LogosResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan logosModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.Name.IsNull() {
		requestBody["name"] = plan.Name.ValueString()
	}
	if !plan.Description.IsNull() {
		requestBody["description"] = plan.Description.ValueString()
	}
	if !plan.Enabled.IsNull() {
		requestBody["enabled"] = plan.Enabled.ValueBool()
	}
	if !plan.Active.IsNull() {
		requestBody["active"] = plan.Active.ValueBool()
	}

	// Make API call
	result, err := r.client.CreateResource(ctx, "/config/logos", requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create logos, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Name = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["description"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Description = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["enabled"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.Enabled = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["active"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.Active = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["status"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Status = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["organization_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OrganizationId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["created_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.CreatedAt = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["modified_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.ModifiedAt = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["updated_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.UpdatedAt = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["created_by"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CreatedBy = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["modified_by"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ModifiedBy = types.StringValue(strVal)
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the logos
func (r *LogosResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state logosModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the logos
func (r *LogosResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan logosModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.Name.IsNull() {
		requestBody["name"] = plan.Name.ValueString()
	}
	if !plan.Description.IsNull() {
		requestBody["description"] = plan.Description.ValueString()
	}
	if !plan.Enabled.IsNull() {
		requestBody["enabled"] = plan.Enabled.ValueBool()
	}
	if !plan.Active.IsNull() {
		requestBody["active"] = plan.Active.ValueBool()
	}

	// Build path with ID
	path := fmt.Sprintf("/config/logos/{logoId}", plan.Id.ValueString())

	// Make API call
	result, err := r.client.UpdateResource(ctx, path, requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update logos, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Name = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["description"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Description = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["enabled"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.Enabled = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["active"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.Active = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["status"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Status = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["organization_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OrganizationId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["created_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.CreatedAt = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["modified_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.ModifiedAt = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["updated_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.UpdatedAt = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["created_by"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CreatedBy = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["modified_by"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ModifiedBy = types.StringValue(strVal)
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the logos
func (r *LogosResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state logosModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Build path with ID
	path := fmt.Sprintf("/config/logos/{logoId}", state.Id.ValueString())

	// Make API call
	err := r.client.DeleteResource(ctx, path)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete logos, got error: %s", err))
		return
	}
}
