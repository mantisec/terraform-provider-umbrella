// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewUpdateinternalnetworkResource)
}

// UpdateinternalnetworkResource implements the updateinternalnetwork resource
type UpdateinternalnetworkResource struct {
	client *apiClient
}

// updateinternalnetworkModel represents the resource data model
type updateinternalnetworkModel struct {
	Id           types.String `tfsdk:"id"`
	NetworkId    types.Int64  `tfsdk:"network_id"`
	TunnelId     types.Int64  `tfsdk:"tunnel_id"`
	Name         types.String `tfsdk:"name"`
	IpAddress    types.String `tfsdk:"ip_address"`
	PrefixLength types.Int64  `tfsdk:"prefix_length"`
	SiteId       types.Int64  `tfsdk:"site_id"`
	TunnelName   types.String `tfsdk:"tunnel_name"`
	CreatedAt    types.String `tfsdk:"created_at"`
	ModifiedAt   types.String `tfsdk:"modified_at"`
	OriginId     types.Int64  `tfsdk:"origin_id"`
	SiteName     types.String `tfsdk:"site_name"`
	NetworkName  types.String `tfsdk:"network_name"`
}

// NewUpdateinternalnetworkResource creates a new updateinternalnetwork resource
func NewUpdateinternalnetworkResource() resource.Resource {
	return &UpdateinternalnetworkResource{}
}

// Metadata returns the resource type name
func (r *UpdateinternalnetworkResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_updateinternalnetwork"
}

// Configure configures the resource with the provider client
func (r *UpdateinternalnetworkResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *UpdateinternalnetworkResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "updateinternalnetwork resource",
		Attributes: map[string]schema.Attribute{
			"id":            schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"network_id":    schema.Int64Attribute{Optional: true, Description: "The network ID. For Web policies through proxy chaining, specify the ID of the network that is associated with the internal network. Provide either the `siteId`, `networkId`, or `tunnelId`."},
			"tunnel_id":     schema.Int64Attribute{Optional: true, Description: "The ID of the tunnel. For Web policies through the IPsec tunnel, specify the ID of Tunnel that is associated with the internal network. Provide either the `siteId`, `networkId`, or `tunnelId`."},
			"name":          schema.StringAttribute{Required: true, Description: "The name of the internal network."},
			"ip_address":    schema.StringAttribute{Required: true, Description: "The IPv4 address of the internal network."},
			"prefix_length": schema.Int64Attribute{Required: true, Description: "Specifies the prefix length. The prefix length must be greater than 8 and no more than 32."},
			"site_id":       schema.Int64Attribute{Optional: true, Description: "The site ID. For DNS policies, specify the ID of the site that is associated with internal network. Provide either the `siteId`, `networkId`, or `tunnelId`."},
			"tunnel_name":   schema.StringAttribute{Computed: true, Description: "The name of the tunnel associated with the internal network."},
			"created_at":    schema.StringAttribute{Computed: true, Description: "The date and time (ISO8601 timestamp) when the internal network was created."},
			"modified_at":   schema.StringAttribute{Computed: true, Description: "The date and time (ISO8601 timestamp) when the internal network was modified."},
			"origin_id":     schema.Int64Attribute{Computed: true, Description: "The origin ID of the internal network."},
			"site_name":     schema.StringAttribute{Computed: true, Description: "The name of the site associated with the internal network."},
			"network_name":  schema.StringAttribute{Computed: true, Description: "The name of the network associated with the internal network."},
		},
	}
}

// Create creates a new updateinternalnetwork
func (r *UpdateinternalnetworkResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan updateinternalnetworkModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific create endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No create endpoint configured for updateinternalnetwork")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the updateinternalnetwork
func (r *UpdateinternalnetworkResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state updateinternalnetworkModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the updateinternalnetwork
func (r *UpdateinternalnetworkResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan updateinternalnetworkModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.NetworkId.IsNull() {
		requestBody["network_id"] = plan.NetworkId.ValueInt64()
	}
	if !plan.TunnelId.IsNull() {
		requestBody["tunnel_id"] = plan.TunnelId.ValueInt64()
	}
	if !plan.Name.IsNull() {
		requestBody["name"] = plan.Name.ValueString()
	}
	if !plan.IpAddress.IsNull() {
		requestBody["ip_address"] = plan.IpAddress.ValueString()
	}
	if !plan.PrefixLength.IsNull() {
		requestBody["prefix_length"] = plan.PrefixLength.ValueInt64()
	}
	if !plan.SiteId.IsNull() {
		requestBody["site_id"] = plan.SiteId.ValueInt64()
	}

	// Build path with ID
	path := fmt.Sprintf("/internalnetworks/{internalNetworkId}", plan.Id.ValueString())

	// Make API call
	result, err := r.client.UpdateResource(ctx, path, requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update updateinternalnetwork, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["network_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.NetworkId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["tunnel_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.TunnelId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Name = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["ip_address"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.IpAddress = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["prefix_length"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.PrefixLength = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["site_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.SiteId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["tunnel_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.TunnelName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["created_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CreatedAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["modified_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ModifiedAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["origin_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OriginId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["site_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SiteName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["network_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.NetworkName = types.StringValue(strVal)
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the updateinternalnetwork
func (r *UpdateinternalnetworkResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state updateinternalnetworkModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for updateinternalnetwork")
}
