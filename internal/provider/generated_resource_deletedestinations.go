// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewDeletedestinationsResource)
}

// DeletedestinationsResource implements the deletedestinations resource
type DeletedestinationsResource struct {
	client *apiClient
}

// deletedestinationsModel represents the resource data model
type deletedestinationsModel struct {
	Id                       types.String `tfsdk:"id"`
	StatusCode               types.Int64  `tfsdk:"status_code"`
	StatusText               types.String `tfsdk:"status_text"`
	DataMetaDomainCount      types.Int64  `tfsdk:"data_meta_domain_count"`
	DataMetaUrlCount         types.Int64  `tfsdk:"data_meta_url_count"`
	DataMetaIpv4Count        types.Int64  `tfsdk:"data_meta_ipv4_count"`
	DataMetaApplicationCount types.Int64  `tfsdk:"data_meta_application_count"`
	DataMetaDestinationCount types.Int64  `tfsdk:"data_meta_destination_count"`
	DataId                   types.Int64  `tfsdk:"data_id"`
	DataAccess               types.String `tfsdk:"data_access"`
	DataName                 types.String `tfsdk:"data_name"`
	DataModifiedAt           types.Int64  `tfsdk:"data_modified_at"`
	DataIsMspDefault         types.Bool   `tfsdk:"data_is_msp_default"`
	DataBundleTypeId         types.Int64  `tfsdk:"data_bundle_type_id"`
	DataOrganizationId       types.Int64  `tfsdk:"data_organization_id"`
	DataIsGlobal             types.Bool   `tfsdk:"data_is_global"`
	DataThirdpartyCategoryId types.Int64  `tfsdk:"data_thirdparty_category_id"`
	DataCreatedAt            types.Int64  `tfsdk:"data_created_at"`
	DataMarkedForDeletion    types.Bool   `tfsdk:"data_marked_for_deletion"`
	IsMspDefault             types.Bool   `tfsdk:"is_msp_default"`
	MetaDestinationCount     types.Int64  `tfsdk:"meta_destination_count"`
	MetaDomainCount          types.Int64  `tfsdk:"meta_domain_count"`
	MetaUrlCount             types.Int64  `tfsdk:"meta_url_count"`
	MetaIpv4Count            types.Int64  `tfsdk:"meta_ipv4_count"`
	MetaApplicationCount     types.Int64  `tfsdk:"meta_application_count"`
	Access                   types.String `tfsdk:"access"`
	Name                     types.String `tfsdk:"name"`
	ModifiedAt               types.Int64  `tfsdk:"modified_at"`
	MarkedForDeletion        types.Bool   `tfsdk:"marked_for_deletion"`
	BundleTypeId             types.Int64  `tfsdk:"bundle_type_id"`
	OrganizationId           types.Int64  `tfsdk:"organization_id"`
	IsGlobal                 types.Bool   `tfsdk:"is_global"`
	ThirdpartyCategoryId     types.Int64  `tfsdk:"thirdparty_category_id"`
	CreatedAt                types.Int64  `tfsdk:"created_at"`
}

// NewDeletedestinationsResource creates a new deletedestinations resource
func NewDeletedestinationsResource() resource.Resource {
	return &DeletedestinationsResource{}
}

// Metadata returns the resource type name
func (r *DeletedestinationsResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_deletedestinations"
}

// Configure configures the resource with the provider client
func (r *DeletedestinationsResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *DeletedestinationsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "deletedestinations resource",
		Attributes: map[string]schema.Attribute{
			"id":                          schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"status_code":                 schema.Int64Attribute{Computed: true, Description: "The HTTP status code of the response."},
			"status_text":                 schema.StringAttribute{Computed: true, Description: "The HTTP message that describes the response."},
			"data_meta_domain_count":      schema.Int64Attribute{Computed: true, Description: "The total number of domains in a destination list. Domains are part of the total number of destinations in a destination list."},
			"data_meta_url_count":         schema.Int64Attribute{Computed: true, Description: "The total number of URLs in a destination list. Urls are part of the total number of destinations in a destination list."},
			"data_meta_ipv4_count":        schema.Int64Attribute{Computed: true, Description: "The total number of IP addresses in a destination list. IP addresses are part of the total number of destinations in a destination list."},
			"data_meta_application_count": schema.Int64Attribute{Computed: true, Description: "The total number of applications in a destination list. Applications are part of the total number of destinations in a destination list."},
			"data_meta_destination_count": schema.Int64Attribute{Computed: true, Description: "The total number of destinations in a destination list."},
			"data_id":                     schema.Int64Attribute{Computed: true, Description: "The unique ID of the destination list."},
			"data_access":                 schema.StringAttribute{Computed: true, Description: "The type of access for the destination list."},
			"data_name":                   schema.StringAttribute{Computed: true, Description: "The name of the destination list."},
			"data_modified_at":            schema.Int64Attribute{Computed: true, Description: "The date and time when the destination list was modified."},
			"data_is_msp_default":         schema.BoolAttribute{Computed: true, Description: "Specifies whether MSP is the default."},
			"data_bundle_type_id":         schema.Int64Attribute{Computed: true, Description: "The type of the destination list in the policy. Set `1` for DNS, `2` for web, and `4` for SAML Bypass. If the field is not specified, the default value is `1`."},
			"data_organization_id":        schema.Int64Attribute{Computed: true, Description: "The organization ID."},
			"data_is_global":              schema.BoolAttribute{Computed: true, Description: "Specifies whether the destination list is a global destination list. There is only one default `allow` destination list and one default `block` destination list for an organization."},
			"data_thirdparty_category_id": schema.Int64Attribute{Computed: true, Description: "The third-party category ID of the destination list."},
			"data_created_at":             schema.Int64Attribute{Computed: true, Description: "The date and time when the destination list was created."},
			"data_marked_for_deletion":    schema.BoolAttribute{Computed: true, Description: "Specifies whether the destination list is marked for deletion."},
			"is_msp_default":              schema.BoolAttribute{Computed: true, Description: "Specifies whether MSP is the default."},
			"meta_destination_count":      schema.Int64Attribute{Computed: true, Description: "The total number of destinations in a destination list."},
			"meta_domain_count":           schema.Int64Attribute{Computed: true, Description: "The total number of domains in a destination list. Domains are part of the total number of destinations in a destination list."},
			"meta_url_count":              schema.Int64Attribute{Computed: true, Description: "The total number of URLs in a destination list. Urls are part of the total number of destinations in a destination list."},
			"meta_ipv4_count":             schema.Int64Attribute{Computed: true, Description: "The total number of IP addresses in a destination list. IP addresses are part of the total number of destinations in a destination list."},
			"meta_application_count":      schema.Int64Attribute{Computed: true, Description: "The total number of applications in a destination list. Applications are part of the total number of destinations in a destination list."},
			"access":                      schema.StringAttribute{Computed: true, Description: "The type of access for the destination list."},
			"name":                        schema.StringAttribute{Computed: true, Description: "The name of the destination list."},
			"modified_at":                 schema.Int64Attribute{Computed: true, Description: "The date and time when the destination list was modified."},
			"marked_for_deletion":         schema.BoolAttribute{Computed: true, Description: "Specifies whether the destination list is marked for deletion."},
			"bundle_type_id":              schema.Int64Attribute{Computed: true, Description: "The type of the destination list in the policy. Set `1` for DNS, `2` for web, and `4` for SAML Bypass. If the field is not specified, the default value is `1`."},
			"organization_id":             schema.Int64Attribute{Computed: true, Description: "The organization ID."},
			"is_global":                   schema.BoolAttribute{Computed: true, Description: "Specifies whether the destination list is a global destination list. There is only one default `allow` destination list and one default `block` destination list for an organization."},
			"thirdparty_category_id":      schema.Int64Attribute{Computed: true, Description: "The third-party category ID of the destination list."},
			"created_at":                  schema.Int64Attribute{Computed: true, Description: "The date and time when the destination list was created."},
		},
	}
}

// Create creates a new deletedestinations
func (r *DeletedestinationsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan deletedestinationsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific create endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No create endpoint configured for deletedestinations")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the deletedestinations
func (r *DeletedestinationsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state deletedestinationsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the deletedestinations
func (r *DeletedestinationsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan deletedestinationsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific update endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No update endpoint configured for deletedestinations")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the deletedestinations
func (r *DeletedestinationsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state deletedestinationsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Build path with ID
	path := fmt.Sprintf("/destinationlists/{destinationListId}/destinations/remove", state.Id.ValueString())

	// Make API call
	err := r.client.DeleteResource(ctx, path)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to delete deletedestinations, got error: %s", err))
		return
	}
}
