// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewUpdatecnameResource)
}

// UpdatecnameResource implements the updatecname resource
type UpdatecnameResource struct {
	client *apiClient
}

// updatecnameModel represents the resource data model
type updatecnameModel struct {
	Id             types.String `tfsdk:"id"`
	CnameId        types.Int64  `tfsdk:"cname_id"`
	Cname          types.String `tfsdk:"cname"`
	OrganizationId types.Int64  `tfsdk:"organization_id"`
}

// NewUpdatecnameResource creates a new updatecname resource
func NewUpdatecnameResource() resource.Resource {
	return &UpdatecnameResource{}
}

// Metadata returns the resource type name
func (r *UpdatecnameResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_updatecname"
}

// Configure configures the resource with the provider client
func (r *UpdatecnameResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *UpdatecnameResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "updatecname resource",
		Attributes: map[string]schema.Attribute{
			"id":              schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"cname_id":        schema.Int64Attribute{Computed: true, Description: "The cname ID."},
			"cname":           schema.StringAttribute{Computed: true, Description: "The cname for the service providers console."},
			"organization_id": schema.Int64Attribute{Computed: true, Description: "The organization ID."},
		},
	}
}

// Create creates a new updatecname
func (r *UpdatecnameResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan updatecnameModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific create endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No create endpoint configured for updatecname")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the updatecname
func (r *UpdatecnameResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state updatecnameModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the updatecname
func (r *UpdatecnameResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan updatecnameModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})

	// Build path with ID
	path := fmt.Sprintf("/config/cnames/{cnameId}", plan.Id.ValueString())

	// Make API call
	result, err := r.client.UpdateResource(ctx, path, requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update updatecname, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["cname_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.CnameId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["cname"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Cname = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["organization_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OrganizationId = types.Int64Value(int64(floatVal))
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the updatecname
func (r *UpdatecnameResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state updatecnameModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for updatecname")
}
