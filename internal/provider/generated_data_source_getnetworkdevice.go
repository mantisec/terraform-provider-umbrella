// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetnetworkdeviceDataSource)
}

// GetnetworkdeviceDataSource implements the getnetworkdevice data source
type GetnetworkdeviceDataSource struct {
	client *apiClient
}

// getnetworkdeviceDataModel represents the data source data model
type getnetworkdeviceDataModel struct {
	Id             types.String `tfsdk:"id"`
	Originid       types.Int64  `tfsdk:"originId"`
	Deviceid       types.String `tfsdk:"deviceId"`
	Devicekey      types.String `tfsdk:"deviceKey"`
	Name           types.String `tfsdk:"name"`
	Serialnumber   types.String `tfsdk:"serialNumber"`
	Createdat      types.String `tfsdk:"createdAt"`
	Organizationid types.Int64  `tfsdk:"organizationId"`
}

// NewGetnetworkdeviceDataSource creates a new getnetworkdevice data source
func NewGetnetworkdeviceDataSource() datasource.DataSource {
	return &GetnetworkdeviceDataSource{}
}

// Metadata returns the data source type name
func (d *GetnetworkdeviceDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getnetworkdevice"
}

// Configure configures the data source with the provider client
func (d *GetnetworkdeviceDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetnetworkdeviceDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getnetworkdevice data source",
		Attributes: map[string]schema.Attribute{
			"id":             schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"originId":       schema.Int64Attribute{Computed: true, Description: "The unique global identifier for this traffic source (origin). Use the origin ID to manage the device. The origin ID is not used by the device."},
			"deviceId":       schema.StringAttribute{Computed: true, Description: "The unique identifier for the specific network device. Insert the identifier into the EDNS packets."},
			"deviceKey":      schema.StringAttribute{Computed: true, Description: "A descriptive unique identifier for the device. Not used by the device."},
			"name":           schema.StringAttribute{Computed: true, Description: "The name of the device."},
			"serialNumber":   schema.StringAttribute{Computed: true, Description: "The serial number of the device."},
			"createdAt":      schema.StringAttribute{Computed: true, Description: "The time when the device was created. Specify an ISO 8601-formatted timestamp."},
			"organizationId": schema.Int64Attribute{Computed: true, Description: "The ID of the organization."},
		},
	}
}

// Read reads the getnetworkdevice data
func (d *GetnetworkdeviceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getnetworkdeviceDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
