// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewUpdatecontactResource)
}

// UpdatecontactResource implements the updatecontact resource
type UpdatecontactResource struct {
	client *apiClient
}

// updatecontactModel represents the resource data model
type updatecontactModel struct {
	Id                                 types.String `tfsdk:"id"`
	ContactType                        types.String `tfsdk:"contact_type"`
	City                               types.String `tfsdk:"city"`
	PhoneNumber                        types.String `tfsdk:"phone_number"`
	StreetAddress                      types.String `tfsdk:"street_address"`
	PhoneNumber2                       types.String `tfsdk:"phone_number2"`
	FaxNumber                          types.String `tfsdk:"fax_number"`
	EmailAddress                       types.String `tfsdk:"email_address"`
	SettingsPrimaryContactLastName     types.String `tfsdk:"settings_primary_contact_last_name"`
	SettingsPrimaryContactEmailAddress types.String `tfsdk:"settings_primary_contact_email_address"`
	SettingsPrimaryContactPhoneNumber  types.String `tfsdk:"settings_primary_contact_phone_number"`
	SettingsPrimaryContactFirstName    types.String `tfsdk:"settings_primary_contact_first_name"`
	SettingsOrganizationName           types.String `tfsdk:"settings_organization_name"`
	SettingsOrganizationEmail          types.String `tfsdk:"settings_organization_email"`
	SettingsDistributorVisibility      types.Bool   `tfsdk:"settings_distributor_visibility"`
	PrimaryContact                     types.String `tfsdk:"primary_contact"`
	FirstName                          types.String `tfsdk:"first_name"`
	LastName                           types.String `tfsdk:"last_name"`
	StreetAddress2                     types.String `tfsdk:"street_address2"`
	State                              types.String `tfsdk:"state"`
	ZipCode                            types.String `tfsdk:"zip_code"`
	CountryCode                        types.String `tfsdk:"country_code"`
	ContactId                          types.Int64  `tfsdk:"contact_id"`
	OrganizationId                     types.Int64  `tfsdk:"organization_id"`
	PrimaryEmailAddress                types.String `tfsdk:"primary_email_address"`
	DistributorVisibility              types.Bool   `tfsdk:"distributor_visibility"`
	OrgName                            types.String `tfsdk:"org_name"`
	CreatedAt                          types.Int64  `tfsdk:"created_at"`
	ModifiedAt                         types.Int64  `tfsdk:"modified_at"`
}

// NewUpdatecontactResource creates a new updatecontact resource
func NewUpdatecontactResource() resource.Resource {
	return &UpdatecontactResource{}
}

// Metadata returns the resource type name
func (r *UpdatecontactResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_updatecontact"
}

// Configure configures the resource with the provider client
func (r *UpdatecontactResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *UpdatecontactResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "updatecontact resource",
		Attributes: map[string]schema.Attribute{
			"id":                                     schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"contact_type":                           schema.StringAttribute{Required: true, Description: "The type of contact."},
			"city":                                   schema.StringAttribute{Optional: true, Description: "The city where the contact is located."},
			"phone_number":                           schema.StringAttribute{Optional: true, Description: "The phone number for the contact."},
			"street_address":                         schema.StringAttribute{Optional: true, Description: "The street address for the contact."},
			"phone_number2":                          schema.StringAttribute{Optional: true, Description: "The second phone number for the contact."},
			"fax_number":                             schema.StringAttribute{Optional: true, Description: "The fax number for the contact."},
			"email_address":                          schema.StringAttribute{Required: true, Description: "The email address for the contact."},
			"settings_primary_contact_last_name":     schema.StringAttribute{Optional: true, Description: "The last name of the distributor contact."},
			"settings_primary_contact_email_address": schema.StringAttribute{Optional: true, Description: "Email address for the distributor contact."},
			"settings_primary_contact_phone_number":  schema.StringAttribute{Optional: true, Description: "The phone number for the distributor contact."},
			"settings_primary_contact_first_name":    schema.StringAttribute{Optional: true, Description: "The first name of the distributor contact."},
			"settings_organization_name":             schema.StringAttribute{Required: true, Description: "The organization name of distributor."},
			"settings_organization_email":            schema.StringAttribute{Required: true, Description: "The organization email of distributor."},
			"settings_distributor_visibility":        schema.BoolAttribute{Required: true, Description: "Specify whether primary contact has visibility into trials."},
			"primary_contact":                        schema.StringAttribute{Optional: true, Description: "Specify whether the contact is the primary contact."},
			"first_name":                             schema.StringAttribute{Optional: true, Description: "The first name of the contact."},
			"last_name":                              schema.StringAttribute{Optional: true, Description: "The last name of the contact."},
			"street_address2":                        schema.StringAttribute{Optional: true, Description: "A secondary street address for the contact."},
			"state":                                  schema.StringAttribute{Optional: true, Description: "The state where the contact is located."},
			"zip_code":                               schema.StringAttribute{Optional: true, Description: "The US zip code where the contact is located."},
			"country_code":                           schema.StringAttribute{Optional: true, Description: "The country code for the contact."},
			"contact_id":                             schema.Int64Attribute{Computed: true, Description: "The contact ID."},
			"organization_id":                        schema.Int64Attribute{Computed: true, Description: "The organization ID."},
			"primary_email_address":                  schema.StringAttribute{Computed: true, Description: "The email address of primary contact of distributor organization."},
			"distributor_visibility":                 schema.BoolAttribute{Computed: true, Description: "Specify whether distributors primary contact has visibility into trials."},
			"org_name":                               schema.StringAttribute{Computed: true, Description: "The organization name of the distributor."},
			"created_at":                             schema.Int64Attribute{Computed: true, Description: "The time when the contact information was created. The time is specified in milliseconds."},
			"modified_at":                            schema.Int64Attribute{Computed: true, Description: "The time when the contact information was last modified. The time is specified in milliseconds."},
		},
	}
}

// Create creates a new updatecontact
func (r *UpdatecontactResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan updatecontactModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific create endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No create endpoint configured for updatecontact")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the updatecontact
func (r *UpdatecontactResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state updatecontactModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the updatecontact
func (r *UpdatecontactResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan updatecontactModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.ContactType.IsNull() {
		requestBody["contact_type"] = plan.ContactType.ValueString()
	}
	if !plan.City.IsNull() {
		requestBody["city"] = plan.City.ValueString()
	}
	if !plan.PhoneNumber.IsNull() {
		requestBody["phone_number"] = plan.PhoneNumber.ValueString()
	}
	if !plan.StreetAddress.IsNull() {
		requestBody["street_address"] = plan.StreetAddress.ValueString()
	}
	if !plan.PhoneNumber2.IsNull() {
		requestBody["phone_number2"] = plan.PhoneNumber2.ValueString()
	}
	if !plan.FaxNumber.IsNull() {
		requestBody["fax_number"] = plan.FaxNumber.ValueString()
	}
	if !plan.EmailAddress.IsNull() {
		requestBody["email_address"] = plan.EmailAddress.ValueString()
	}
	if !plan.SettingsPrimaryContactLastName.IsNull() {
		requestBody["settings_primary_contact_last_name"] = plan.SettingsPrimaryContactLastName.ValueString()
	}
	if !plan.SettingsPrimaryContactEmailAddress.IsNull() {
		requestBody["settings_primary_contact_email_address"] = plan.SettingsPrimaryContactEmailAddress.ValueString()
	}
	if !plan.SettingsPrimaryContactPhoneNumber.IsNull() {
		requestBody["settings_primary_contact_phone_number"] = plan.SettingsPrimaryContactPhoneNumber.ValueString()
	}
	if !plan.SettingsPrimaryContactFirstName.IsNull() {
		requestBody["settings_primary_contact_first_name"] = plan.SettingsPrimaryContactFirstName.ValueString()
	}
	if !plan.SettingsOrganizationName.IsNull() {
		requestBody["settings_organization_name"] = plan.SettingsOrganizationName.ValueString()
	}
	if !plan.SettingsOrganizationEmail.IsNull() {
		requestBody["settings_organization_email"] = plan.SettingsOrganizationEmail.ValueString()
	}
	if !plan.SettingsDistributorVisibility.IsNull() {
		requestBody["settings_distributor_visibility"] = plan.SettingsDistributorVisibility.ValueBool()
	}
	if !plan.PrimaryContact.IsNull() {
		requestBody["primary_contact"] = plan.PrimaryContact.ValueString()
	}
	if !plan.FirstName.IsNull() {
		requestBody["first_name"] = plan.FirstName.ValueString()
	}
	if !plan.LastName.IsNull() {
		requestBody["last_name"] = plan.LastName.ValueString()
	}
	if !plan.StreetAddress2.IsNull() {
		requestBody["street_address2"] = plan.StreetAddress2.ValueString()
	}
	if !plan.State.IsNull() {
		requestBody["state"] = plan.State.ValueString()
	}
	if !plan.ZipCode.IsNull() {
		requestBody["zip_code"] = plan.ZipCode.ValueString()
	}
	if !plan.CountryCode.IsNull() {
		requestBody["country_code"] = plan.CountryCode.ValueString()
	}

	// Build path with ID
	path := fmt.Sprintf("/config/contacts/{contactId}", plan.Id.ValueString())

	// Make API call
	result, err := r.client.UpdateResource(ctx, path, requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update updatecontact, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["contact_type"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ContactType = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["city"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.City = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["phone_number"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PhoneNumber = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["street_address"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StreetAddress = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["phone_number2"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PhoneNumber2 = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["fax_number"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.FaxNumber = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["email_address"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.EmailAddress = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_primary_contact_last_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SettingsPrimaryContactLastName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_primary_contact_email_address"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SettingsPrimaryContactEmailAddress = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_primary_contact_phone_number"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SettingsPrimaryContactPhoneNumber = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_primary_contact_first_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SettingsPrimaryContactFirstName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_organization_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SettingsOrganizationName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_organization_email"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.SettingsOrganizationEmail = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["settings_distributor_visibility"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.SettingsDistributorVisibility = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["primary_contact"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PrimaryContact = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["first_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.FirstName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["last_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.LastName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["street_address2"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StreetAddress2 = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["state"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.State = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["zip_code"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ZipCode = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["country_code"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CountryCode = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["contact_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.ContactId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["organization_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OrganizationId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["primary_email_address"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PrimaryEmailAddress = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["distributor_visibility"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.DistributorVisibility = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["org_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.OrgName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["created_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.CreatedAt = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["modified_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.ModifiedAt = types.Int64Value(int64(floatVal))
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the updatecontact
func (r *UpdatecontactResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state updatecontactModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for updatecontact")
}
