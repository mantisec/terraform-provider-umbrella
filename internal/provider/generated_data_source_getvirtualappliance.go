// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetvirtualapplianceDataSource)
}

// GetvirtualapplianceDataSource implements the getvirtualappliance data source
type GetvirtualapplianceDataSource struct {
	client *apiClient
}

// getvirtualapplianceDataModel represents the data source data model
type getvirtualapplianceDataModel struct {
	Id             types.String `tfsdk:"id"`
	Stateupdatedat types.String `tfsdk:"stateUpdatedAt"`
	Originid       types.Int64  `tfsdk:"originId"`
	Name           types.String `tfsdk:"name"`
	State          types.Object `tfsdk:"state"`
	Health         types.String `tfsdk:"health"`
	Type           types.String `tfsdk:"type"`
	Settings       types.Object `tfsdk:"settings"`
	Siteid         types.Int64  `tfsdk:"siteId"`
	Isupgradable   types.Bool   `tfsdk:"isUpgradable"`
	Createdat      types.String `tfsdk:"createdAt"`
	Modifiedat     types.String `tfsdk:"modifiedAt"`
}

// NewGetvirtualapplianceDataSource creates a new getvirtualappliance data source
func NewGetvirtualapplianceDataSource() datasource.DataSource {
	return &GetvirtualapplianceDataSource{}
}

// Metadata returns the data source type name
func (d *GetvirtualapplianceDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getvirtualappliance"
}

// Configure configures the data source with the provider client
func (d *GetvirtualapplianceDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetvirtualapplianceDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getvirtualappliance data source",
		Attributes: map[string]schema.Attribute{
			"id":             schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"stateUpdatedAt": schema.StringAttribute{Computed: true, Description: "The date and time (ISO8601 timestamp) when the virtual appliance's state was updated."},
			"originId":       schema.Int64Attribute{Computed: true, Description: "The origin ID of the virtual appliance."},
			"name":           schema.StringAttribute{Computed: true, Description: "The name of the virtual appliance."},
			"state":          schema.StringAttribute{Computed: true, Description: "The properties for the state of the virtual appliance."},
			"health":         schema.StringAttribute{Computed: true, Description: "A description of the health of the virtual appliance."},
			"type":           schema.StringAttribute{Computed: true, Description: "The type of the virtual appliance."},
			"settings":       schema.StringAttribute{Computed: true, Description: "The properties of the settings on the virtual appliance."},
			"siteId":         schema.Int64Attribute{Computed: true, Description: "The site ID of the virtual appliance."},
			"isUpgradable":   schema.BoolAttribute{Computed: true, Description: "Specifies whether you can upgrade the virtual appliance (VA) to the latest VA version."},
			"createdAt":      schema.StringAttribute{Computed: true, Description: "The date and time (ISO8601 timestamp) when the VA was created."},
			"modifiedAt":     schema.StringAttribute{Computed: true, Description: "The date and time (ISO8601 timestamp) when the VA was modified."},
		},
	}
}

// Read reads the getvirtualappliance data
func (d *GetvirtualapplianceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getvirtualapplianceDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
