// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewUpdatetunnelcredentialsResource)
}

// UpdatetunnelcredentialsResource implements the updatetunnelcredentials resource
type UpdatetunnelcredentialsResource struct {
	client *apiClient
}

// updatetunnelcredentialsModel represents the resource data model
type updatetunnelcredentialsModel struct {
	Id                                       types.String `tfsdk:"id"`
	DeprecateCurrentKeys                     types.Bool   `tfsdk:"deprecate_current_keys"`
	AutoRotate                               types.Bool   `tfsdk:"auto_rotate"`
	PskIdPrefix                              types.String `tfsdk:"psk_id_prefix"`
	PskSecret                                types.String `tfsdk:"psk_secret"`
	Uri                                      types.String `tfsdk:"uri"`
	SiteOriginId                             types.Int64  `tfsdk:"site_origin_id"`
	CreatedAt                                types.String `tfsdk:"created_at"`
	Name                                     types.String `tfsdk:"name"`
	ClientAuthenticationType                 types.String `tfsdk:"client_authentication_type"`
	ClientAuthenticationParametersId         types.String `tfsdk:"client_authentication_parameters_id"`
	ClientAuthenticationParametersModifiedAt types.String `tfsdk:"client_authentication_parameters_modified_at"`
	ClientAuthenticationParametersSecret     types.String `tfsdk:"client_authentication_parameters_secret"`
	ClientDeviceType                         types.String `tfsdk:"client_device_type"`
	TransportProtocol                        types.String `tfsdk:"transport_protocol"`
	ServiceType                              types.String `tfsdk:"service_type"`
	NetworkCIDRs                             types.Set    `tfsdk:"network_c_i_d_rs"`
	ModifiedAt                               types.String `tfsdk:"modified_at"`
}

// NewUpdatetunnelcredentialsResource creates a new updatetunnelcredentials resource
func NewUpdatetunnelcredentialsResource() resource.Resource {
	return &UpdatetunnelcredentialsResource{}
}

// Metadata returns the resource type name
func (r *UpdatetunnelcredentialsResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_updatetunnelcredentials"
}

// Configure configures the resource with the provider client
func (r *UpdatetunnelcredentialsResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *UpdatetunnelcredentialsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "updatetunnelcredentials resource",
		Attributes: map[string]schema.Attribute{
			"id":                                  schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"deprecate_current_keys":              schema.BoolAttribute{Optional: true, Description: "Specifies whether to deprecate any existing credentials. The 24-hour window does not apply. Umbrella deletes the existing keys immediately. Set either both `idPrefix` and `secret` or `autoRotate` to true. The default value is false."},
			"auto_rotate":                         schema.BoolAttribute{Required: true, Description: "Specifies whether to autogenerate keys. The 24-hour window applies. Umbrella ignores any passed in credentials."},
			"psk_id_prefix":                       schema.StringAttribute{Optional: true, Description: "Required if autoRotate is set to false. To be concatenated with server-side parameters to generate the ID for the pre-shared key (PSK). If the value of `idPrefix` matches the current `idPrefix`, then 24-hour credential storage is disabled. If the tunnel uses an IP address as the PSK ID, format the IP address as a string; `autoRotate` is disabled."},
			"psk_secret":                          schema.StringAttribute{Optional: true, Description: "The secret aspect of a Pre-Shared Key. Optional, but either idPrefix OR idPrefix and secret must be passed OR auto-Rotate set to true. (16-64 characters, at least one upper and lowercase letter, one number, no special characters.)"},
			"uri":                                 schema.StringAttribute{Computed: true, Description: "Resource URI"},
			"site_origin_id":                      schema.Int64Attribute{Computed: true, Description: "The Site origin ID that is associated with the tunnel."},
			"created_at":                          schema.StringAttribute{Computed: true, Description: "The date and time (timestamp) when the tunnel was created."},
			"name":                                schema.StringAttribute{Computed: true, Description: "Display the name of the tunnel. The tunnel name is required, cannot exceed 50 characters in length, and can't have any special characters other than spaces and hyphens."},
			"client_authentication_type":          schema.StringAttribute{Computed: true},
			"client_authentication_parameters_id": schema.StringAttribute{Computed: true, Description: "The PSK ID. If an IP address is used as the ID, the IP address is the value of this field."},
			"client_authentication_parameters_modified_at": schema.StringAttribute{Computed: true, Description: "The data and time (timestamp) when the tunnel was updated."},
			"client_authentication_parameters_secret":      schema.StringAttribute{Computed: true, Description: "The secret of the PSK credentials. Ensure that you save the secret. The secret is not provided at any other time."},
			"client_device_type":                           schema.StringAttribute{Computed: true, Description: "The type of device where the tunnel originates. The default value is `other`."},
			"transport_protocol":                           schema.StringAttribute{Computed: true, Description: "The tunnel transport protocol. The default transport protocol is IPSec."},
			"service_type":                                 schema.StringAttribute{Computed: true, Description: "The type of service to associate with the tunnel. The default value is `SIG`."},
			"network_c_i_d_rs":                             schema.SetAttribute{Computed: true, Description: "Enter IPv4 ranges and CIDR addresses. If `serviceType` is SIG, add all public and private address ranges used internally by your organization. Overrides Umbrella's default behavior, which allows traffic that is destined for RFC-1918 addresses to return through the tunnel. If `serviceType` is Private Access, this field is required. The 0.0.0.0/0 address range is not allowed.", ElementType: types.StringType},
			"modified_at":                                  schema.StringAttribute{Computed: true, Description: "The data and time (timestamp) when the tunnel was updated."},
		},
	}
}

// Create creates a new updatetunnelcredentials
func (r *UpdatetunnelcredentialsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan updatetunnelcredentialsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.DeprecateCurrentKeys.IsNull() {
		requestBody["deprecate_current_keys"] = plan.DeprecateCurrentKeys.ValueBool()
	}
	if !plan.AutoRotate.IsNull() {
		requestBody["auto_rotate"] = plan.AutoRotate.ValueBool()
	}
	if !plan.PskIdPrefix.IsNull() {
		requestBody["psk_id_prefix"] = plan.PskIdPrefix.ValueString()
	}
	if !plan.PskSecret.IsNull() {
		requestBody["psk_secret"] = plan.PskSecret.ValueString()
	}

	// Make API call
	result, err := r.client.CreateResource(ctx, "/tunnels/{id}/keys", requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create updatetunnelcredentials, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["deprecate_current_keys"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.DeprecateCurrentKeys = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["auto_rotate"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.AutoRotate = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["psk_id_prefix"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PskIdPrefix = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["psk_secret"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PskSecret = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["uri"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Uri = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["site_origin_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.SiteOriginId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["created_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CreatedAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Name = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["client_authentication_type"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ClientAuthenticationType = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["client_authentication_parameters_id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ClientAuthenticationParametersId = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["client_authentication_parameters_modified_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ClientAuthenticationParametersModifiedAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["client_authentication_parameters_secret"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ClientAuthenticationParametersSecret = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["client_device_type"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ClientDeviceType = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["transport_protocol"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.TransportProtocol = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["service_type"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ServiceType = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["network_c_i_d_rs"]; exists && val != nil {
			}
			if val, exists := dataMap["modified_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ModifiedAt = types.StringValue(strVal)
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the updatetunnelcredentials
func (r *UpdatetunnelcredentialsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state updatetunnelcredentialsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the updatetunnelcredentials
func (r *UpdatetunnelcredentialsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan updatetunnelcredentialsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific update endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No update endpoint configured for updatetunnelcredentials")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the updatetunnelcredentials
func (r *UpdatetunnelcredentialsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state updatetunnelcredentialsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for updatetunnelcredentials")
}
