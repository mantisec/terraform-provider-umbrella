// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetinternaldomainDataSource)
}

// GetinternaldomainDataSource implements the getinternaldomain data source
type GetinternaldomainDataSource struct {
	client *apiClient
}

// getinternaldomainDataModel represents the data source data model
type getinternaldomainDataModel struct {
	Id                      types.String `tfsdk:"id"`
	Includeallmobiledevices types.Bool   `tfsdk:"includeAllMobileDevices"`
	Createdat               types.String `tfsdk:"createdAt"`
	Modifiedat              types.String `tfsdk:"modifiedAt"`
	Siteids                 types.Set    `tfsdk:"siteIds"`
	Domain                  types.String `tfsdk:"domain"`
	Description             types.String `tfsdk:"description"`
	Includeallvas           types.Bool   `tfsdk:"includeAllVAs"`
}

// NewGetinternaldomainDataSource creates a new getinternaldomain data source
func NewGetinternaldomainDataSource() datasource.DataSource {
	return &GetinternaldomainDataSource{}
}

// Metadata returns the data source type name
func (d *GetinternaldomainDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getinternaldomain"
}

// Configure configures the data source with the provider client
func (d *GetinternaldomainDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetinternaldomainDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getinternaldomain data source",
		Attributes: map[string]schema.Attribute{
			"id":                      schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"includeAllMobileDevices": schema.BoolAttribute{Computed: true, Description: "Specifies whether to apply the internal domain to all mobile devices."},
			"createdAt":               schema.StringAttribute{Computed: true, Description: "The date and time (ISO 8601 timestamp) when the internal domain was created."},
			"modifiedAt":              schema.StringAttribute{Computed: true, Description: "The date and time (ISO 8601 timestamp) when the internal domain was modified."},
			"siteIds":                 schema.SetAttribute{Computed: true, Description: "The list of site IDs associated with the domain.", ElementType: types.StringType},
			"domain":                  schema.StringAttribute{Computed: true, Description: "The domain name of the internal domain."},
			"description":             schema.StringAttribute{Computed: true, Description: "The description of the internal domain."},
			"includeAllVAs":           schema.BoolAttribute{Computed: true, Description: "Specifies whether to apply the internal domain to all virtual appliances."},
		},
	}
}

// Read reads the getinternaldomain data
func (d *GetinternaldomainDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getinternaldomainDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
