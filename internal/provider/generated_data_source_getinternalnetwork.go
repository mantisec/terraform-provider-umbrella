// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetinternalnetworkDataSource)
}

// GetinternalnetworkDataSource implements the getinternalnetwork data source
type GetinternalnetworkDataSource struct {
	client *apiClient
}

// getinternalnetworkDataModel represents the data source data model
type getinternalnetworkDataModel struct {
	Id           types.String `tfsdk:"id"`
	Name         types.String `tfsdk:"name"`
	Ipaddress    types.String `tfsdk:"ipAddress"`
	Tunnelname   types.String `tfsdk:"tunnelName"`
	Tunnelid     types.Int64  `tfsdk:"tunnelId"`
	Createdat    types.String `tfsdk:"createdAt"`
	Modifiedat   types.String `tfsdk:"modifiedAt"`
	Originid     types.Int64  `tfsdk:"originId"`
	Prefixlength types.Int64  `tfsdk:"prefixLength"`
	Sitename     types.String `tfsdk:"siteName"`
	Siteid       types.Int64  `tfsdk:"siteId"`
	Networkname  types.String `tfsdk:"networkName"`
	Networkid    types.Int64  `tfsdk:"networkId"`
}

// NewGetinternalnetworkDataSource creates a new getinternalnetwork data source
func NewGetinternalnetworkDataSource() datasource.DataSource {
	return &GetinternalnetworkDataSource{}
}

// Metadata returns the data source type name
func (d *GetinternalnetworkDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getinternalnetwork"
}

// Configure configures the data source with the provider client
func (d *GetinternalnetworkDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetinternalnetworkDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getinternalnetwork data source",
		Attributes: map[string]schema.Attribute{
			"id":           schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"name":         schema.StringAttribute{Computed: true, Description: "The name of the internal network."},
			"ipAddress":    schema.StringAttribute{Computed: true, Description: "The IPv4 address of the internal network."},
			"tunnelName":   schema.StringAttribute{Computed: true, Description: "The name of the tunnel associated with the internal network."},
			"tunnelId":     schema.Int64Attribute{Computed: true, Description: "The ID of the tunnel associated with the internal network."},
			"createdAt":    schema.StringAttribute{Computed: true, Description: "The date and time (ISO8601 timestamp) when the internal network was created."},
			"modifiedAt":   schema.StringAttribute{Computed: true, Description: "The date and time (ISO8601 timestamp) when the internal network was modified."},
			"originId":     schema.Int64Attribute{Computed: true, Description: "The origin ID of the internal network."},
			"prefixLength": schema.Int64Attribute{Computed: true, Description: "The prefix length of the internal network. The prefix length is greater than 8 and no more than 32."},
			"siteName":     schema.StringAttribute{Computed: true, Description: "The name of the site associated with the internal network."},
			"siteId":       schema.Int64Attribute{Computed: true, Description: "The ID of the site associated with the internal network."},
			"networkName":  schema.StringAttribute{Computed: true, Description: "The name of the network associated with the internal network."},
			"networkId":    schema.Int64Attribute{Computed: true, Description: "The ID of the network associated with the internal network."},
		},
	}
}

// Read reads the getinternalnetwork data
func (d *GetinternalnetworkDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getinternalnetworkDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
