// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetapplicationsinfoDataSource)
}

// GetapplicationsinfoDataSource implements the getapplicationsinfo data source
type GetapplicationsinfoDataSource struct {
	client *apiClient
}

// getapplicationsinfoDataModel represents the data source data model
type getapplicationsinfoDataModel struct {
	Id          types.String `tfsdk:"id"`
	Itemscount  types.Int64  `tfsdk:"itemsCount"`
	Items       types.Set    `tfsdk:"items"`
	Currentpage types.Int64  `tfsdk:"currentPage"`
	Totalpages  types.Int64  `tfsdk:"totalPages"`
}

// NewGetapplicationsinfoDataSource creates a new getapplicationsinfo data source
func NewGetapplicationsinfoDataSource() datasource.DataSource {
	return &GetapplicationsinfoDataSource{}
}

// Metadata returns the data source type name
func (d *GetapplicationsinfoDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getapplicationsinfo"
}

// Configure configures the data source with the provider client
func (d *GetapplicationsinfoDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetapplicationsinfoDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getapplicationsinfo data source",
		Attributes: map[string]schema.Attribute{
			"id":          schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"itemsCount":  schema.Int64Attribute{Computed: true, Description: "The number of items in the collection."},
			"items":       schema.SetAttribute{Computed: true, Description: "The list of information about the applications.", ElementType: types.StringType},
			"currentPage": schema.Int64Attribute{Computed: true, Description: "The index of the current page in the collection."},
			"totalPages":  schema.Int64Attribute{Computed: true, Description: "The total number of pages in the collection."},
		},
	}
}

// Read reads the getapplicationsinfo data
func (d *GetapplicationsinfoDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getapplicationsinfoDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
