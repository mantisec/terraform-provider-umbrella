// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGettunnelDataSource)
}

// GettunnelDataSource implements the gettunnel data source
type GettunnelDataSource struct {
	client *apiClient
}

// gettunnelDataModel represents the data source data model
type gettunnelDataModel struct {
	Id           types.String `tfsdk:"id"`
	Uri          types.String `tfsdk:"uri"`
	Createdat    types.String `tfsdk:"createdAt"`
	Modifiedat   types.String `tfsdk:"modifiedAt"`
	Servicetype  types.String `tfsdk:"serviceType"`
	Networkcidrs types.Set    `tfsdk:"networkCIDRs"`
	Meta         types.Object `tfsdk:"meta"`
	Name         types.String `tfsdk:"name"`
	Siteoriginid types.Int64  `tfsdk:"siteOriginId"`
	Client       types.Object `tfsdk:"client"`
	Transport    types.Object `tfsdk:"transport"`
}

// NewGettunnelDataSource creates a new gettunnel data source
func NewGettunnelDataSource() datasource.DataSource {
	return &GettunnelDataSource{}
}

// Metadata returns the data source type name
func (d *GettunnelDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_gettunnel"
}

// Configure configures the data source with the provider client
func (d *GettunnelDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GettunnelDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "gettunnel data source",
		Attributes: map[string]schema.Attribute{
			"id":           schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"uri":          schema.StringAttribute{Computed: true, Description: "Resource URI"},
			"createdAt":    schema.StringAttribute{Computed: true, Description: "The time when the tunnel was created."},
			"modifiedAt":   schema.StringAttribute{Computed: true, Description: "The data and time (timestamp) when the tunnel was updated."},
			"serviceType":  schema.StringAttribute{Computed: true, Description: "The type of service to associate with the tunnel. The default value is `SIG`."},
			"networkCIDRs": schema.SetAttribute{Computed: true, Description: "Enter IPv4 ranges and CIDR addresses. If `serviceType` is SIG, add all public and private address ranges used internally by your organization. Overrides Umbrella's default behavior, which allows traffic that is destined for RFC-1918 addresses to return through the tunnel. If `serviceType` is Private Access, this field is required. The 0.0.0.0/0 address range is not allowed.", ElementType: types.StringType},
			"meta":         schema.StringAttribute{Computed: true, Description: "Metadata for the tunnel object, relating to service internals."},
			"name":         schema.StringAttribute{Computed: true, Description: "The display name of the tunnel. The tunnel name is required, cannot exceed 50 characters in length, and can't have any special characters other than spaces and hyphens."},
			"siteOriginId": schema.Int64Attribute{Computed: true, Description: "The site origin ID, which is associated with the tunnel."},
			"client":       schema.StringAttribute{Computed: true, Description: "The tunnel client's configuration metadata."},
			"transport":    schema.StringAttribute{Computed: true},
		},
	}
}

// Read reads the gettunnel data
func (d *GettunnelDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config gettunnelDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
