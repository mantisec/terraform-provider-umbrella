// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewUpdateprovidercustomerResource)
}

// UpdateprovidercustomerResource implements the updateprovidercustomer resource
type UpdateprovidercustomerResource struct {
	client *apiClient
}

// updateprovidercustomerModel represents the resource data model
type updateprovidercustomerModel struct {
	Id                 types.String `tfsdk:"id"`
	CustomerName       types.String `tfsdk:"customer_name"`
	PackageName        types.String `tfsdk:"package_name"`
	StreetAddress2     types.String `tfsdk:"street_address2"`
	City               types.String `tfsdk:"city"`
	State              types.String `tfsdk:"state"`
	CountryCode        types.String `tfsdk:"country_code"`
	CreatedAt          types.String `tfsdk:"created_at"`
	LicenseType        types.String `tfsdk:"license_type"`
	Seats              types.Int64  `tfsdk:"seats"`
	ZipCode            types.String `tfsdk:"zip_code"`
	PackageId          types.Int64  `tfsdk:"package_id"`
	AddonDlp           types.Bool   `tfsdk:"addon_dlp"`
	CustomerId         types.Int64  `tfsdk:"customer_id"`
	DealId             types.String `tfsdk:"deal_id"`
	CcwDealOwnerEmails types.Set    `tfsdk:"ccw_deal_owner_emails"`
	IsTrial            types.Bool   `tfsdk:"is_trial"`
	AddonRbi           types.String `tfsdk:"addon_rbi"`
	StreetAddress      types.String `tfsdk:"street_address"`
	AdminEmails        types.Set    `tfsdk:"admin_emails"`
	ModifiedAt         types.String `tfsdk:"modified_at"`
	AddonCdfwL7        types.Bool   `tfsdk:"addon_cdfw_l7"`
}

// NewUpdateprovidercustomerResource creates a new updateprovidercustomer resource
func NewUpdateprovidercustomerResource() resource.Resource {
	return &UpdateprovidercustomerResource{}
}

// Metadata returns the resource type name
func (r *UpdateprovidercustomerResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_updateprovidercustomer"
}

// Configure configures the resource with the provider client
func (r *UpdateprovidercustomerResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *UpdateprovidercustomerResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "updateprovidercustomer resource",
		Attributes: map[string]schema.Attribute{
			"id":                    schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"customer_name":         schema.StringAttribute{Computed: true, Description: "The name of the customer's organization."},
			"package_name":          schema.StringAttribute{Computed: true, Description: "The name of the Umbrella package. To create or update a customer with either the SIG Essentials or SIG Advantage package, you must have a license for the selected package.  Package Id  Package Name  ::----  `99`  Umbrella Professional   `101`  Umbrella Platform   `107`  Umbrella Insights   `171`  Cisco Umbrella for Wireless LAN   `202`  Cisco Umbrella for EDU   `246`  Umbrella DNS Security Essentials   `248`  Umbrella DNS Security Advantage   `250`  Umbrella SIG Essentials   `252`  Umbrella SIG Advantage   `312`  Umbrella Not for Resale (NFR) MSP DNS Advantage  Note: The Umbrella NFR MSP DNS Advantage package (`312`) is only available in the Umbrella Secure MSP console."},
			"street_address2":       schema.StringAttribute{Computed: true, Description: "The second street address for the customer."},
			"city":                  schema.StringAttribute{Computed: true, Description: "The name of the city where the customer's organization is located."},
			"state":                 schema.StringAttribute{Computed: true, Description: "The name of the customer's state."},
			"country_code":          schema.StringAttribute{Computed: true, Description: "The country code of the customer's organization."},
			"created_at":            schema.StringAttribute{Computed: true, Description: "The time when the customer information was created. The timestamp is specified in the ISO 8601 format."},
			"license_type":          schema.StringAttribute{Computed: true, Description: "The type of license for the customer's organization."},
			"seats":                 schema.Int64Attribute{Computed: true, Description: "The number of users."},
			"zip_code":              schema.StringAttribute{Computed: true, Description: "The zip code of the customer's organization."},
			"package_id":            schema.Int64Attribute{Computed: true, Description: "The ID of the Umbrella package. To create or update a customer with either the SIG Essentials or SIG Advantage package, you must have a license for the selected package.  Package Id  Package Name  ::----  `99`  Umbrella Professional   `101`  Umbrella Platform   `107`  Umbrella Insights   `171`  Cisco Umbrella for Wireless LAN   `202`  Cisco Umbrella for EDU   `246`  Umbrella DNS Security Essentials   `248`  Umbrella DNS Security Advantage   `250`  Umbrella SIG Essentials   `252`  Umbrella SIG Advantage   `312`  Umbrella Not for Resale (NFR) MSP DNS Advantage  Note: The Umbrella NFR MSP DNS Advantage package (`312`) is only available in the Umbrella Secure MSP console."},
			"addon_dlp":             schema.BoolAttribute{Computed: true, Description: "Specify whether data loss prevention (DLP) is added to the subscription. The Data Loss Prevention Add-On is applicable only for SIG E."},
			"customer_id":           schema.Int64Attribute{Computed: true, Description: "The ID for the customer."},
			"deal_id":               schema.StringAttribute{Computed: true, Description: "The deal ID."},
			"ccw_deal_owner_emails": schema.SetAttribute{Computed: true, Description: "The list emails for the CCW deal owner.", ElementType: types.StringType},
			"is_trial":              schema.BoolAttribute{Computed: true, Description: "Specify whether the customer is a trial with an MSSP with SPLA (MSLA) license."},
			"addon_rbi":             schema.StringAttribute{Computed: true, Description: "Specify whether remote browser isolation (RBI) is added to the subscription. Remote Browser Isolation Add-On is applicable for SIG Essentials or SIG Advantage only: `0` = No selection `1` = RBI Isolate Risky `2` = RBI Isolate Web Applications `3` = RBI Isolate All"},
			"street_address":        schema.StringAttribute{Computed: true, Description: "The street address for the customer."},
			"admin_emails":          schema.SetAttribute{Computed: true, Description: "The list of the administrator email addresses.", ElementType: types.StringType},
			"modified_at":           schema.StringAttribute{Computed: true, Description: "The time when the customer information was last modified. The timestamp is specified in the ISO 8601 format."},
			"addon_cdfw_l7":         schema.BoolAttribute{Computed: true, Description: "Specify whether if cloud delivered firewall (CDFW) is added to the subscription. The L7 Cloud Delivered Firewall Solution is applicable only for SIG E."},
		},
	}
}

// Create creates a new updateprovidercustomer
func (r *UpdateprovidercustomerResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan updateprovidercustomerModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific create endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No create endpoint configured for updateprovidercustomer")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the updateprovidercustomer
func (r *UpdateprovidercustomerResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state updateprovidercustomerModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the updateprovidercustomer
func (r *UpdateprovidercustomerResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan updateprovidercustomerModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})

	// Build path with ID
	path := fmt.Sprintf("/providers/customers/{customerId}", plan.Id.ValueString())

	// Make API call
	result, err := r.client.UpdateResource(ctx, path, requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update updateprovidercustomer, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["customer_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CustomerName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["package_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PackageName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["street_address2"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StreetAddress2 = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["city"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.City = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["state"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.State = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["country_code"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CountryCode = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["created_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CreatedAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["license_type"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.LicenseType = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["seats"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.Seats = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["zip_code"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ZipCode = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["package_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.PackageId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["addon_dlp"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.AddonDlp = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["customer_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.CustomerId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["deal_id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.DealId = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["ccw_deal_owner_emails"]; exists && val != nil {
			}
			if val, exists := dataMap["is_trial"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.IsTrial = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["addon_rbi"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.AddonRbi = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["street_address"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StreetAddress = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["admin_emails"]; exists && val != nil {
			}
			if val, exists := dataMap["modified_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ModifiedAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["addon_cdfw_l7"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.AddonCdfwL7 = types.BoolValue(boolVal)
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the updateprovidercustomer
func (r *UpdateprovidercustomerResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state updateprovidercustomerModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for updateprovidercustomer")
}
