// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewCreatecustomeraccessrequestResource)
}

// CreatecustomeraccessrequestResource implements the createcustomeraccessrequest resource
type CreatecustomeraccessrequestResource struct {
	client *apiClient
}

// createcustomeraccessrequestModel represents the resource data model
type createcustomeraccessrequestModel struct {
	Id               types.String `tfsdk:"id"`
	ModifiedAt       types.Int64  `tfsdk:"modified_at"`
	OrganizationName types.String `tfsdk:"organization_name"`
	OrganizationId   types.Int64  `tfsdk:"organization_id"`
	State            types.String `tfsdk:"state"`
	DisplayAt        types.Int64  `tfsdk:"display_at"`
	CreatedAt        types.Int64  `tfsdk:"created_at"`
}

// NewCreatecustomeraccessrequestResource creates a new createcustomeraccessrequest resource
func NewCreatecustomeraccessrequestResource() resource.Resource {
	return &CreatecustomeraccessrequestResource{}
}

// Metadata returns the resource type name
func (r *CreatecustomeraccessrequestResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_createcustomeraccessrequest"
}

// Configure configures the resource with the provider client
func (r *CreatecustomeraccessrequestResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *CreatecustomeraccessrequestResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "createcustomeraccessrequest resource",
		Attributes: map[string]schema.Attribute{
			"id":                schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"modified_at":       schema.Int64Attribute{Computed: true, Description: "The time when the logo was last modified. Specify the time in milliseconds."},
			"organization_name": schema.StringAttribute{Required: true, Description: "The name of the organization that created the access request."},
			"organization_id":   schema.Int64Attribute{Computed: true, Description: "The ID of the organization that created the access request."},
			"state":             schema.StringAttribute{Required: true, Description: "The current state of the access request."},
			"display_at":        schema.Int64Attribute{Optional: true, Description: "The time when the logo was created. Specify the time in milliseconds."},
			"created_at":        schema.Int64Attribute{Computed: true, Description: "The time when the logo was created. Specify the time in milliseconds."},
		},
	}
}

// Create creates a new createcustomeraccessrequest
func (r *CreatecustomeraccessrequestResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan createcustomeraccessrequestModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.OrganizationName.IsNull() {
		requestBody["organization_name"] = plan.OrganizationName.ValueString()
	}
	if !plan.State.IsNull() {
		requestBody["state"] = plan.State.ValueString()
	}
	if !plan.DisplayAt.IsNull() {
		requestBody["display_at"] = plan.DisplayAt.ValueInt64()
	}

	// Make API call
	result, err := r.client.CreateResource(ctx, "/providers/customers/{customerId}/accessRequests", requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create createcustomeraccessrequest, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["modified_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.ModifiedAt = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["organization_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.OrganizationName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["organization_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OrganizationId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["state"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.State = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["display_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.DisplayAt = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["created_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.CreatedAt = types.Int64Value(int64(floatVal))
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the createcustomeraccessrequest
func (r *CreatecustomeraccessrequestResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state createcustomeraccessrequestModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the createcustomeraccessrequest
func (r *CreatecustomeraccessrequestResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan createcustomeraccessrequestModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific update endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No update endpoint configured for createcustomeraccessrequest")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the createcustomeraccessrequest
func (r *CreatecustomeraccessrequestResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state createcustomeraccessrequestModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for createcustomeraccessrequest")
}
