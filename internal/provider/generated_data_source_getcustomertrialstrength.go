// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetcustomertrialstrengthDataSource)
}

// GetcustomertrialstrengthDataSource implements the getcustomertrialstrength data source
type GetcustomertrialstrengthDataSource struct {
	client *apiClient
}

// getcustomertrialstrengthDataModel represents the data source data model
type getcustomertrialstrengthDataModel struct {
	Id                types.String `tfsdk:"id"`
	Customerloggedin  types.Bool   `tfsdk:"customerLoggedIn"`
	Lastlogindate     types.String `tfsdk:"lastLoginDate"`
	Identitiescreated types.Int64  `tfsdk:"identitiesCreated"`
	Hastraffic        types.Bool   `tfsdk:"hasTraffic"`
	Trialstrength     types.String `tfsdk:"trialStrength"`
}

// NewGetcustomertrialstrengthDataSource creates a new getcustomertrialstrength data source
func NewGetcustomertrialstrengthDataSource() datasource.DataSource {
	return &GetcustomertrialstrengthDataSource{}
}

// Metadata returns the data source type name
func (d *GetcustomertrialstrengthDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getcustomertrialstrength"
}

// Configure configures the data source with the provider client
func (d *GetcustomertrialstrengthDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetcustomertrialstrengthDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getcustomertrialstrength data source",
		Attributes: map[string]schema.Attribute{
			"id":                schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"customerLoggedIn":  schema.BoolAttribute{Computed: true, Description: "Specify whether the trial customer logged into their organization."},
			"lastLoginDate":     schema.StringAttribute{Computed: true, Description: "The date when the customer last logged into their organization."},
			"identitiesCreated": schema.Int64Attribute{Computed: true, Description: "The number of identities that were created."},
			"hasTraffic":        schema.BoolAttribute{Computed: true, Description: "Specify whether the organization has traffic."},
			"trialStrength":     schema.StringAttribute{Computed: true, Description: "The number of features used by the trial. The hyphen (`-`) character indicates no features."},
		},
	}
}

// Read reads the getcustomertrialstrength data
func (d *GetcustomertrialstrengthDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getcustomertrialstrengthDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
