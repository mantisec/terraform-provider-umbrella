// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetapplicationDataSource)
}

// GetapplicationDataSource implements the getapplication data source
type GetapplicationDataSource struct {
	client *apiClient
}

// getapplicationDataModel represents the data source data model
type getapplicationDataModel struct {
	Id              types.String `tfsdk:"id"`
	Apptype         types.String `tfsdk:"appType"`
	Url             types.String `tfsdk:"url"`
	Identitiescount types.Int64  `tfsdk:"identitiesCount"`
	Firstdetected   types.String `tfsdk:"firstDetected"`
	Lastdetected    types.String `tfsdk:"lastDetected"`
	Name            types.String `tfsdk:"name"`
	Weightedrisk    types.String `tfsdk:"weightedRisk"`
	Label           types.String `tfsdk:"label"`
	Category        types.String `tfsdk:"category"`
	Vendor          types.String `tfsdk:"vendor"`
	Sources         types.Set    `tfsdk:"sources"`
	Description     types.String `tfsdk:"description"`
}

// NewGetapplicationDataSource creates a new getapplication data source
func NewGetapplicationDataSource() datasource.DataSource {
	return &GetapplicationDataSource{}
}

// Metadata returns the data source type name
func (d *GetapplicationDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getapplication"
}

// Configure configures the data source with the provider client
func (d *GetapplicationDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetapplicationDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getapplication data source",
		Attributes: map[string]schema.Attribute{
			"id":              schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"appType":         schema.StringAttribute{Computed: true, Description: "The type of the app."},
			"url":             schema.StringAttribute{Computed: true, Description: "The URL of the app."},
			"identitiesCount": schema.Int64Attribute{Computed: true, Description: "The number of identities."},
			"firstDetected":   schema.StringAttribute{Computed: true, Description: "The date and time (ISO 8601 timestamp) when the app was first detected."},
			"lastDetected":    schema.StringAttribute{Computed: true, Description: "The date and time (ISO 8601 timestamp) when the app was last detected."},
			"name":            schema.StringAttribute{Computed: true, Description: "The name of the app."},
			"weightedRisk":    schema.StringAttribute{Computed: true, Description: "The risk the app poses to the environment."},
			"label":           schema.StringAttribute{Computed: true, Description: "The application label. Valid values are: `unreviewed`, `approved`, `notApproved`, `underAudit`."},
			"category":        schema.StringAttribute{Computed: true, Description: "The category applied to the app."},
			"vendor":          schema.StringAttribute{Computed: true, Description: "The vendor that owns the app."},
			"sources":         schema.SetAttribute{Computed: true, Description: "The list of app sources where the sources are DNS, Web (Secure Web Gateway), and cloud-delivered firewall (CDFW) traffic events. The list can contain one or more of the source types.", ElementType: types.StringType},
			"description":     schema.StringAttribute{Computed: true, Description: "The description of the app."},
		},
	}
}

// Read reads the getapplication data
func (d *GetapplicationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getapplicationDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
