// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewRemoveResource)
}

// RemoveResource implements the remove resource
type RemoveResource struct {
	client *apiClient
}

// removeModel represents the resource data model
type removeModel struct {
	Id                   types.String `tfsdk:"id"`
	Access               types.String `tfsdk:"access"`
	IsGlobal             types.Bool   `tfsdk:"is_global"`
	Name                 types.String `tfsdk:"name"`
	BundleTypeId         types.Int64  `tfsdk:"bundle_type_id"`
	OrganizationId       types.Int64  `tfsdk:"organization_id"`
	ThirdpartyCategoryId types.Int64  `tfsdk:"thirdparty_category_id"`
	CreatedAt            types.Int64  `tfsdk:"created_at"`
	ModifiedAt           types.Int64  `tfsdk:"modified_at"`
	IsMspDefault         types.Bool   `tfsdk:"is_msp_default"`
	MarkedForDeletion    types.Bool   `tfsdk:"marked_for_deletion"`
}

// NewRemoveResource creates a new remove resource
func NewRemoveResource() resource.Resource {
	return &RemoveResource{}
}

// Metadata returns the resource type name
func (r *RemoveResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_remove"
}

// Configure configures the resource with the provider client
func (r *RemoveResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *RemoveResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "remove resource",
		Attributes: map[string]schema.Attribute{
			"id":                     schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"access":                 schema.StringAttribute{Computed: true, Description: "The type of access for the destination list (allow/block)"},
			"is_global":              schema.BoolAttribute{Computed: true, Description: "Specifies whether the destination list is a global destination list"},
			"name":                   schema.StringAttribute{Computed: true, Description: "The name of the destination list"},
			"bundle_type_id":         schema.Int64Attribute{Computed: true, Description: "The type of the destination list in the policy"},
			"organization_id":        schema.Int64Attribute{Computed: true, Description: "The organization ID"},
			"thirdparty_category_id": schema.Int64Attribute{Computed: true, Description: "The third-party category ID of the destination list"},
			"created_at":             schema.Int64Attribute{Computed: true, Description: "The date and time when the destination list was created"},
			"modified_at":            schema.Int64Attribute{Computed: true, Description: "The date and time when the destination list was modified"},
			"is_msp_default":         schema.BoolAttribute{Computed: true, Description: "Specifies whether MSP is the default"},
			"marked_for_deletion":    schema.BoolAttribute{Computed: true, Description: "Specifies whether the destination list is marked for deletion"},
		},
	}
}

// Create creates a new remove
func (r *RemoveResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan removeModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// TODO: Implement create logic - no specific create endpoint found

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Update updates the remove
func (r *RemoveResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan removeModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// TODO: Implement update logic - no specific update endpoint found

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the remove
func (r *RemoveResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state removeModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// TODO: Implement read logic - no specific read endpoint found

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete deletes the remove
func (r *RemoveResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state removeModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// TODO: Implement delete logic using DELETE /destinationlists/{destinationListId}/destinations/remove
}
