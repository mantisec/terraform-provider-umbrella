// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewCreatecustomertrialextensionsResource)
}

// CreatecustomertrialextensionsResource implements the createcustomertrialextensions resource
type CreatecustomertrialextensionsResource struct {
	client *apiClient
}

// createcustomertrialextensionsModel represents the resource data model
type createcustomertrialextensionsModel struct {
	Id                                                         types.String `tfsdk:"id"`
	TrialExtensionDays                                         types.Int64  `tfsdk:"trial_extension_days"`
	PackageId                                                  types.Int64  `tfsdk:"package_id"`
	AccountManagerEmails                                       types.Set    `tfsdk:"account_manager_emails"`
	OrganizationTypeId                                         types.Int64  `tfsdk:"organization_type_id"`
	AdminEmails                                                types.Set    `tfsdk:"admin_emails"`
	StreetAddress                                              types.String `tfsdk:"street_address"`
	IsOnboardingWizardCompleted                                types.Bool   `tfsdk:"is_onboarding_wizard_completed"`
	TrialId                                                    types.String `tfsdk:"trial_id"`
	OriginId                                                   types.Int64  `tfsdk:"origin_id"`
	EndsAt                                                     types.String `tfsdk:"ends_at"`
	City                                                       types.String `tfsdk:"city"`
	ZipCode                                                    types.String `tfsdk:"zip_code"`
	AccessRequestId                                            types.Int64  `tfsdk:"access_request_id"`
	AccessRequestState                                         types.String `tfsdk:"access_request_state"`
	TrialExtensionCount                                        types.Int64  `tfsdk:"trial_extension_count"`
	OrganizationId                                             types.Int64  `tfsdk:"organization_id"`
	SubscriptionId                                             types.Int64  `tfsdk:"subscription_id"`
	PackageName                                                types.String `tfsdk:"package_name"`
	StreetAddress2                                             types.String `tfsdk:"street_address2"`
	TrialExtendedDays                                          types.Int64  `tfsdk:"trial_extended_days"`
	OrganizationName                                           types.String `tfsdk:"organization_name"`
	CountryCode                                                types.String `tfsdk:"country_code"`
	CreatedAt                                                  types.Int64  `tfsdk:"created_at"`
	StartsAt                                                   types.String `tfsdk:"starts_at"`
	State                                                      types.String `tfsdk:"state"`
	Users                                                      types.Int64  `tfsdk:"users"`
	PackageInternalName                                        types.String `tfsdk:"package_internal_name"`
	StrengthCustomerLoggedIn                                   types.Bool   `tfsdk:"strength_customer_logged_in"`
	StrengthLastLoginDate                                      types.String `tfsdk:"strength_last_login_date"`
	StrengthIdentitiesCreated                                  types.Int64  `tfsdk:"strength_identities_created"`
	StrengthHasTraffic                                         types.Bool   `tfsdk:"strength_has_traffic"`
	StrengthTrialStrength                                      types.String `tfsdk:"strength_trial_strength"`
	DealId                                                     types.String `tfsdk:"deal_id"`
	PpovLifecycleEnabled                                       types.Bool   `tfsdk:"ppov_lifecycle_enabled"`
	PpovLifecycleLastSentDate                                  types.String `tfsdk:"ppov_lifecycle_last_sent_date"`
	PpovLifecycleMailIdentifiersNoLoginDayFourMailIdentifier   types.String `tfsdk:"ppov_lifecycle_mail_identifiers_no_login_day_four_mail_identifier"`
	PpovLifecycleMailIdentifiersNoOriginDayThreeMailIdentifier types.String `tfsdk:"ppov_lifecycle_mail_identifiers_no_origin_day_three_mail_identifier"`
	PpovLifecycleMailIdentifiersNoOriginDaySevenMailIdentifier types.String `tfsdk:"ppov_lifecycle_mail_identifiers_no_origin_day_seven_mail_identifier"`
	PpovLifecycleExcludedLifecycleEmails                       types.Set    `tfsdk:"ppov_lifecycle_excluded_lifecycle_emails"`
	PpovLifecycleState                                         types.String `tfsdk:"ppov_lifecycle_state"`
	PpovLifecycleDate                                          types.String `tfsdk:"ppov_lifecycle_date"`
	HasDistributorVisibility                                   types.Bool   `tfsdk:"has_distributor_visibility"`
	TrialPeriod                                                types.String `tfsdk:"trial_period"`
	ModifiedAt                                                 types.Int64  `tfsdk:"modified_at"`
}

// NewCreatecustomertrialextensionsResource creates a new createcustomertrialextensions resource
func NewCreatecustomertrialextensionsResource() resource.Resource {
	return &CreatecustomertrialextensionsResource{}
}

// Metadata returns the resource type name
func (r *CreatecustomertrialextensionsResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_createcustomertrialextensions"
}

// Configure configures the resource with the provider client
func (r *CreatecustomertrialextensionsResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *CreatecustomertrialextensionsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "createcustomertrialextensions resource",
		Attributes: map[string]schema.Attribute{
			"id":                             schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"trial_extension_days":           schema.Int64Attribute{Optional: true, Description: "The number of days to extend the trial."},
			"package_id":                     schema.Int64Attribute{Computed: true, Description: "The ID of the Umbrella package. To create or update a customer with either the SIG Essentials or SIG Advantage package, you must have a license for the selected package.  Package Id  Package Name  ::----  `99`  Umbrella Professional   `101`  Umbrella Platform   `107`  Umbrella Insights   `171`  Cisco Umbrella for Wireless LAN   `202`  Cisco Umbrella for EDU   `246`  Umbrella DNS Security Essentials   `248`  Umbrella DNS Security Advantage   `250`  Umbrella SIG Essentials   `252`  Umbrella SIG Advantage   `312`  Umbrella Not for Resale (NFR) MSP DNS Advantage  Note: The Umbrella NFR MSP DNS Advantage package (`312`) is only available in the Umbrella Secure MSP console."},
			"account_manager_emails":         schema.SetAttribute{Computed: true, Description: "The emails of the account managers.", ElementType: types.StringType},
			"organization_type_id":           schema.Int64Attribute{Computed: true, Description: "The type ID of the customer's organization."},
			"admin_emails":                   schema.SetAttribute{Computed: true, Description: "The list of the administrator email addresses.", ElementType: types.StringType},
			"street_address":                 schema.StringAttribute{Computed: true, Description: "The street address for the customer."},
			"is_onboarding_wizard_completed": schema.BoolAttribute{Computed: true, Description: "Specify whether the customer has logged into Umbrella."},
			"trial_id":                       schema.StringAttribute{Computed: true, Description: "The MD5 value of the organization ID."},
			"origin_id":                      schema.Int64Attribute{Computed: true, Description: "The origin ID created for the customer."},
			"ends_at":                        schema.StringAttribute{Computed: true, Description: "The end date of the subscription."},
			"city":                           schema.StringAttribute{Computed: true, Description: "The name of the city where the customer's organization is located."},
			"zip_code":                       schema.StringAttribute{Computed: true, Description: "The zip code of the customer's organization."},
			"access_request_id":              schema.Int64Attribute{Computed: true, Description: "The ID of the access request to enable access to the child organization."},
			"access_request_state":           schema.StringAttribute{Computed: true, Description: "The state of the access request."},
			"trial_extension_count":          schema.Int64Attribute{Computed: true, Description: "The number of extensions that are applied to the trial."},
			"organization_id":                schema.Int64Attribute{Computed: true, Description: "The ID of the organization."},
			"subscription_id":                schema.Int64Attribute{Computed: true, Description: "The ID of the subscription."},
			"package_name":                   schema.StringAttribute{Computed: true, Description: "The name of the Umbrella package. To create or update a customer with either the SIG Essentials or SIG Advantage package, you must have a license for the selected package.  Package Id  Package Name  ::----  `99`  Umbrella Professional   `101`  Umbrella Platform   `107`  Umbrella Insights   `171`  Cisco Umbrella for Wireless LAN   `202`  Cisco Umbrella for EDU   `246`  Umbrella DNS Security Essentials   `248`  Umbrella DNS Security Advantage   `250`  Umbrella SIG Essentials   `252`  Umbrella SIG Advantage   `312`  Umbrella Not for Resale (NFR) MSP DNS Advantage  Note: The Umbrella NFR MSP DNS Advantage package (`312`) is only available in the Umbrella Secure MSP console."},
			"street_address2":                schema.StringAttribute{Computed: true, Description: "The second street address for the customer."},
			"trial_extended_days":            schema.Int64Attribute{Computed: true, Description: "The number of days to extend the trial."},
			"organization_name":              schema.StringAttribute{Computed: true, Description: "The name of the customer's organization."},
			"country_code":                   schema.StringAttribute{Computed: true, Description: "The country code of the customer's organization."},
			"created_at":                     schema.Int64Attribute{Computed: true, Description: "The time when the logo was created. Specify the time in milliseconds."},
			"starts_at":                      schema.StringAttribute{Computed: true, Description: "The start date of the subscription."},
			"state":                          schema.StringAttribute{Computed: true, Description: "The name of the customer's state."},
			"users":                          schema.Int64Attribute{Computed: true, Description: "The number of users in the subscription."},
			"package_internal_name":          schema.StringAttribute{Computed: true, Description: "The internal name for the package."},
			"strength_customer_logged_in":    schema.BoolAttribute{Computed: true, Description: "Specify whether the trial customer logged into their organization."},
			"strength_last_login_date":       schema.StringAttribute{Computed: true, Description: "The date when the customer last logged into their organization."},
			"strength_identities_created":    schema.Int64Attribute{Computed: true, Description: "The number of identities that were created."},
			"strength_has_traffic":           schema.BoolAttribute{Computed: true, Description: "Specify whether the organization has traffic."},
			"strength_trial_strength":        schema.StringAttribute{Computed: true, Description: "The number of features used by the trial. The hyphen (`-`) character indicates no features."},
			"deal_id":                        schema.StringAttribute{Computed: true, Description: "The deal ID."},
			"ppov_lifecycle_enabled":         schema.BoolAttribute{Computed: true, Description: "Specify whether lifecycle emails are enabled."},
			"ppov_lifecycle_last_sent_date":  schema.StringAttribute{Computed: true, Description: "The date when the last lifecycle email was sent."},
			"ppov_lifecycle_mail_identifiers_no_login_day_four_mail_identifier":   schema.StringAttribute{Computed: true, Description: "The email for the customer that did not log in for four days."},
			"ppov_lifecycle_mail_identifiers_no_origin_day_three_mail_identifier": schema.StringAttribute{Computed: true, Description: "The email for the customer that has not set up an origin for three days."},
			"ppov_lifecycle_mail_identifiers_no_origin_day_seven_mail_identifier": schema.StringAttribute{Computed: true, Description: "The email for the customer that has not set up an origin for seven days."},
			"ppov_lifecycle_excluded_lifecycle_emails":                            schema.SetAttribute{Computed: true, Description: "The emails excluded for the lifecycle of the customer.", ElementType: types.StringType},
			"ppov_lifecycle_state":       schema.StringAttribute{Computed: true, Description: "The current state of the customer trial."},
			"ppov_lifecycle_date":        schema.StringAttribute{Computed: true, Description: "The date of the lifecycle event."},
			"has_distributor_visibility": schema.BoolAttribute{Computed: true, Description: "Specify whether the distributor has visibility into the trial."},
			"trial_period":               schema.StringAttribute{Computed: true, Description: "The period of the trial, including the start and end times."},
			"modified_at":                schema.Int64Attribute{Computed: true, Description: "The time when the logo was last modified. Specify the time in milliseconds."},
		},
	}
}

// Create creates a new createcustomertrialextensions
func (r *CreatecustomertrialextensionsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan createcustomertrialextensionsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.TrialExtensionDays.IsNull() {
		requestBody["trial_extension_days"] = plan.TrialExtensionDays.ValueInt64()
	}

	// Make API call
	result, err := r.client.CreateResource(ctx, "/providers/customers/{customerId}/trialExtensions", requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create createcustomertrialextensions, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["trial_extension_days"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.TrialExtensionDays = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["package_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.PackageId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["account_manager_emails"]; exists && val != nil {
			}
			if val, exists := dataMap["organization_type_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OrganizationTypeId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["admin_emails"]; exists && val != nil {
			}
			if val, exists := dataMap["street_address"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StreetAddress = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["is_onboarding_wizard_completed"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.IsOnboardingWizardCompleted = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["trial_id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.TrialId = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["origin_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OriginId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["ends_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.EndsAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["city"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.City = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["zip_code"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ZipCode = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["access_request_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.AccessRequestId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["access_request_state"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.AccessRequestState = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["trial_extension_count"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.TrialExtensionCount = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["organization_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OrganizationId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["subscription_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.SubscriptionId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["package_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PackageName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["street_address2"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StreetAddress2 = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["trial_extended_days"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.TrialExtendedDays = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["organization_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.OrganizationName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["country_code"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CountryCode = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["created_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.CreatedAt = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["starts_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StartsAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["state"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.State = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["users"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.Users = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["package_internal_name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PackageInternalName = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["strength_customer_logged_in"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.StrengthCustomerLoggedIn = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["strength_last_login_date"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StrengthLastLoginDate = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["strength_identities_created"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.StrengthIdentitiesCreated = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["strength_has_traffic"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.StrengthHasTraffic = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["strength_trial_strength"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.StrengthTrialStrength = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["deal_id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.DealId = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["ppov_lifecycle_enabled"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.PpovLifecycleEnabled = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["ppov_lifecycle_last_sent_date"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PpovLifecycleLastSentDate = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["ppov_lifecycle_mail_identifiers_no_login_day_four_mail_identifier"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PpovLifecycleMailIdentifiersNoLoginDayFourMailIdentifier = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["ppov_lifecycle_mail_identifiers_no_origin_day_three_mail_identifier"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PpovLifecycleMailIdentifiersNoOriginDayThreeMailIdentifier = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["ppov_lifecycle_mail_identifiers_no_origin_day_seven_mail_identifier"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PpovLifecycleMailIdentifiersNoOriginDaySevenMailIdentifier = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["ppov_lifecycle_excluded_lifecycle_emails"]; exists && val != nil {
			}
			if val, exists := dataMap["ppov_lifecycle_state"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PpovLifecycleState = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["ppov_lifecycle_date"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.PpovLifecycleDate = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["has_distributor_visibility"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.HasDistributorVisibility = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["trial_period"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.TrialPeriod = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["modified_at"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.ModifiedAt = types.Int64Value(int64(floatVal))
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the createcustomertrialextensions
func (r *CreatecustomertrialextensionsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state createcustomertrialextensionsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the createcustomertrialextensions
func (r *CreatecustomertrialextensionsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan createcustomertrialextensionsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific update endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No update endpoint configured for createcustomertrialextensions")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the createcustomertrialextensions
func (r *CreatecustomertrialextensionsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state createcustomertrialextensionsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for createcustomertrialextensions")
}
