// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewUpdatesiteResource)
}

// UpdatesiteResource implements the updatesite resource
type UpdatesiteResource struct {
	client *apiClient
}

// updatesiteModel represents the resource data model
type updatesiteModel struct {
	Id                   types.String `tfsdk:"id"`
	Name                 types.String `tfsdk:"name"`
	OriginId             types.Int64  `tfsdk:"origin_id"`
	InternalNetworkCount types.Int64  `tfsdk:"internal_network_count"`
	VaCount              types.Int64  `tfsdk:"va_count"`
	CreatedAt            types.String `tfsdk:"created_at"`
	SiteId               types.Int64  `tfsdk:"site_id"`
	IsDefault            types.Bool   `tfsdk:"is_default"`
	Type                 types.String `tfsdk:"type"`
	ModifiedAt           types.String `tfsdk:"modified_at"`
}

// NewUpdatesiteResource creates a new updatesite resource
func NewUpdatesiteResource() resource.Resource {
	return &UpdatesiteResource{}
}

// Metadata returns the resource type name
func (r *UpdatesiteResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_updatesite"
}

// Configure configures the resource with the provider client
func (r *UpdatesiteResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *UpdatesiteResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "updatesite resource",
		Attributes: map[string]schema.Attribute{
			"id":                     schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"name":                   schema.StringAttribute{Required: true, Description: "The name of the site. The name is a sequence of characters with a length from 1 through 255."},
			"origin_id":              schema.Int64Attribute{Computed: true, Description: "The origin ID of the site."},
			"internal_network_count": schema.Int64Attribute{Computed: true, Description: "The number of internal networks that are attached to the site."},
			"va_count":               schema.Int64Attribute{Computed: true, Description: "The number of virtual appliances that are attached to the site."},
			"created_at":             schema.StringAttribute{Computed: true, Description: "The date and time (ISO 8601 timestamp) when the site was created."},
			"site_id":                schema.Int64Attribute{Computed: true, Description: "The ID of the site."},
			"is_default":             schema.BoolAttribute{Computed: true, Description: "Specifies whether the site is the default."},
			"type":                   schema.StringAttribute{Computed: true, Description: "The type of the site."},
			"modified_at":            schema.StringAttribute{Computed: true, Description: "The date and time (ISO 8601 timestamp) when the site was modified."},
		},
	}
}

// Create creates a new updatesite
func (r *UpdatesiteResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan updatesiteModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific create endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No create endpoint configured for updatesite")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the updatesite
func (r *UpdatesiteResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state updatesiteModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the updatesite
func (r *UpdatesiteResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan updatesiteModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.Name.IsNull() {
		requestBody["name"] = plan.Name.ValueString()
	}

	// Build path with ID
	path := fmt.Sprintf("/sites/{siteId}", plan.Id.ValueString())

	// Make API call
	result, err := r.client.UpdateResource(ctx, path, requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to update updatesite, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["name"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Name = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["origin_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.OriginId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["internal_network_count"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.InternalNetworkCount = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["va_count"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.VaCount = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["created_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.CreatedAt = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["site_id"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.SiteId = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["is_default"]; exists && val != nil {
				if boolVal, ok := val.(bool); ok {
					plan.IsDefault = types.BoolValue(boolVal)
				}
			}
			if val, exists := dataMap["type"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Type = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["modified_at"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.ModifiedAt = types.StringValue(strVal)
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the updatesite
func (r *UpdatesiteResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state updatesiteModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for updatesite")
}
