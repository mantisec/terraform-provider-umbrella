// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetlogoDataSource)
}

// GetlogoDataSource implements the getlogo data source
type GetlogoDataSource struct {
	client *apiClient
}

// getlogoDataModel represents the data source data model
type getlogoDataModel struct {
	Id             types.String `tfsdk:"id"`
	Modifiedat     types.Int64  `tfsdk:"modifiedAt"`
	Brandingtypeid types.Int64  `tfsdk:"brandingTypeId"`
	Imageurl       types.String `tfsdk:"imageUrl"`
	Token          types.String `tfsdk:"token"`
	Createdat      types.Int64  `tfsdk:"createdAt"`
	Enabled        types.Bool   `tfsdk:"enabled"`
	Organizationid types.String `tfsdk:"organizationId"`
	Imagekey       types.String `tfsdk:"imageKey"`
}

// NewGetlogoDataSource creates a new getlogo data source
func NewGetlogoDataSource() datasource.DataSource {
	return &GetlogoDataSource{}
}

// Metadata returns the data source type name
func (d *GetlogoDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getlogo"
}

// Configure configures the data source with the provider client
func (d *GetlogoDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetlogoDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getlogo data source",
		Attributes: map[string]schema.Attribute{
			"id":             schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"modifiedAt":     schema.Int64Attribute{Computed: true, Description: "The time when the logo was last modified. The time is specified in milliseconds."},
			"brandingTypeId": schema.Int64Attribute{Computed: true, Description: "The ID of the type of branding."},
			"imageUrl":       schema.StringAttribute{Computed: true, Description: "The URL for the logo."},
			"token":          schema.StringAttribute{Computed: true, Description: "The randomly generated number for the logo."},
			"createdAt":      schema.Int64Attribute{Computed: true, Description: "The time when the logo was created. The time is specified in milliseconds."},
			"enabled":        schema.BoolAttribute{Computed: true, Description: "Specify whether the logo is in use."},
			"organizationId": schema.StringAttribute{Computed: true, Description: "The ID of the organization associated with the logo."},
			"imageKey":       schema.StringAttribute{Computed: true, Description: "The key for the logo."},
		},
	}
}

// Read reads the getlogo data
func (d *GetlogoDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getlogoDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
