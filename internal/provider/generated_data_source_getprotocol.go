// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetprotocolDataSource)
}

// GetprotocolDataSource implements the getprotocol data source
type GetprotocolDataSource struct {
	client *apiClient
}

// getprotocolDataModel represents the data source data model
type getprotocolDataModel struct {
	Id              types.String `tfsdk:"id"`
	Identitiescount types.Int64  `tfsdk:"identitiesCount"`
	Events          types.Int64  `tfsdk:"events"`
	Blockedevents   types.Int64  `tfsdk:"blockedEvents"`
	Firstdetected   types.String `tfsdk:"firstDetected"`
	Lastdetected    types.String `tfsdk:"lastDetected"`
	Name            types.String `tfsdk:"name"`
	Description     types.String `tfsdk:"description"`
}

// NewGetprotocolDataSource creates a new getprotocol data source
func NewGetprotocolDataSource() datasource.DataSource {
	return &GetprotocolDataSource{}
}

// Metadata returns the data source type name
func (d *GetprotocolDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getprotocol"
}

// Configure configures the data source with the provider client
func (d *GetprotocolDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetprotocolDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getprotocol data source",
		Attributes: map[string]schema.Attribute{
			"id":              schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"identitiesCount": schema.Int64Attribute{Computed: true, Description: "The number of identities."},
			"events":          schema.Int64Attribute{Computed: true, Description: "The number of identity events."},
			"blockedEvents":   schema.Int64Attribute{Computed: true, Description: "The number of blocked events for the identities."},
			"firstDetected":   schema.StringAttribute{Computed: true, Description: "The date and time (ISO 8601 timestamp) when the protocol was first detected for the identities."},
			"lastDetected":    schema.StringAttribute{Computed: true, Description: "The date and time (ISO 8601 timestamp) when the protocol was last detected for the identities."},
			"name":            schema.StringAttribute{Computed: true, Description: "The name of the protocol."},
			"description":     schema.StringAttribute{Computed: true, Description: "The description of the protocol."},
		},
	}
}

// Read reads the getprotocol data
func (d *GetprotocolDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getprotocolDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
