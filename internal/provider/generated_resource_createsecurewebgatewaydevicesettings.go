// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this resource with the generated resource registry
func init() {
	RegisterGeneratedResource(NewCreatesecurewebgatewaydevicesettingsResource)
}

// CreatesecurewebgatewaydevicesettingsResource implements the createsecurewebgatewaydevicesettings resource
type CreatesecurewebgatewaydevicesettingsResource struct {
	client *apiClient
}

// createsecurewebgatewaydevicesettingsModel represents the resource data model
type createsecurewebgatewaydevicesettingsModel struct {
	Id           types.String `tfsdk:"id"`
	OriginIds    types.Set    `tfsdk:"origin_ids"`
	Value        types.String `tfsdk:"value"`
	Items        types.Set    `tfsdk:"items"`
	TotalCount   types.Int64  `tfsdk:"total_count"`
	SuccessCount types.Int64  `tfsdk:"success_count"`
	FailCount    types.Int64  `tfsdk:"fail_count"`
}

// NewCreatesecurewebgatewaydevicesettingsResource creates a new createsecurewebgatewaydevicesettings resource
func NewCreatesecurewebgatewaydevicesettingsResource() resource.Resource {
	return &CreatesecurewebgatewaydevicesettingsResource{}
}

// Metadata returns the resource type name
func (r *CreatesecurewebgatewaydevicesettingsResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "umbrella_createsecurewebgatewaydevicesettings"
}

// Configure configures the resource with the provider client
func (r *CreatesecurewebgatewaydevicesettingsResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected Resource Configure Type", "Expected *apiClient")
		return
	}

	r.client = client
}

// Schema defines the resource schema
func (r *CreatesecurewebgatewaydevicesettingsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "createsecurewebgatewaydevicesettings resource",
		Attributes: map[string]schema.Attribute{
			"id":            schema.StringAttribute{Computed: true, Description: "Resource identifier"},
			"origin_ids":    schema.SetAttribute{Required: true, Description: "The list of origin IDs. The list can contain 1â€“100 origin IDs.", ElementType: types.StringType},
			"value":         schema.StringAttribute{Required: true, Description: "Specifies whether to enable the Secure Web Gateway (SWG) device settings. Valid values are: `0` or `1` where `1` indicates enable."},
			"items":         schema.SetAttribute{Computed: true, Description: "The list of device setting status properties.", ElementType: types.StringType},
			"total_count":   schema.Int64Attribute{Computed: true, Description: "The total number of devices that requested to update the device setting."},
			"success_count": schema.Int64Attribute{Computed: true, Description: "The number of devices that successfully changed the device setting."},
			"fail_count":    schema.Int64Attribute{Computed: true, Description: "The number of devices that failed to change the device setting."},
		},
	}
}

// Create creates a new createsecurewebgatewaydevicesettings
func (r *CreatesecurewebgatewaydevicesettingsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan createsecurewebgatewaydevicesettingsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Create request body from plan
	requestBody := make(map[string]interface{})
	if !plan.OriginIds.IsNull() {
		requestBody["origin_ids"] = plan.OriginIds.ValueString()
	}
	if !plan.Value.IsNull() {
		requestBody["value"] = plan.Value.ValueString()
	}

	// Make API call
	result, err := r.client.CreateResource(ctx, "/deviceSettings/SWGEnabled/set", requestBody)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Unable to create createsecurewebgatewaydevicesettings, got error: %s", err))
		return
	}

	// Update state with response data
	if result.Data != nil {
		if dataMap, ok := result.Data.(map[string]interface{}); ok {
			if val, exists := dataMap["id"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Id = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["origin_ids"]; exists && val != nil {
			}
			if val, exists := dataMap["value"]; exists && val != nil {
				if strVal, ok := val.(string); ok {
					plan.Value = types.StringValue(strVal)
				}
			}
			if val, exists := dataMap["items"]; exists && val != nil {
			}
			if val, exists := dataMap["total_count"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.TotalCount = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["success_count"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.SuccessCount = types.Int64Value(int64(floatVal))
				}
			}
			if val, exists := dataMap["fail_count"]; exists && val != nil {
				if floatVal, ok := val.(float64); ok {
					plan.FailCount = types.Int64Value(int64(floatVal))
				}
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Read reads the createsecurewebgatewaydevicesettings
func (r *CreatesecurewebgatewaydevicesettingsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state createsecurewebgatewaydevicesettingsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific read endpoint found - return current state
	// This is a no-op read that just returns the current state

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update updates the createsecurewebgatewaydevicesettings
func (r *CreatesecurewebgatewaydevicesettingsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan createsecurewebgatewaydevicesettingsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// No specific update endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No update endpoint configured for createsecurewebgatewaydevicesettings")
	return

	resp.Diagnostics.Append(resp.State.Set(ctx, plan)...)
}

// Delete deletes the createsecurewebgatewaydevicesettings
func (r *CreatesecurewebgatewaydevicesettingsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state createsecurewebgatewaydevicesettingsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// No specific delete endpoint found
	resp.Diagnostics.AddError("Configuration Error", "No delete endpoint configured for createsecurewebgatewaydevicesettings")
}
