// Code generated by terraform-provider-umbrella generator. DO NOT EDIT.

package provider

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// init registers this data source with the generated resource registry
func init() {
	RegisterGeneratedDataSource(NewGetcontactDataSource)
}

// GetcontactDataSource implements the getcontact data source
type GetcontactDataSource struct {
	client *apiClient
}

// getcontactDataModel represents the data source data model
type getcontactDataModel struct {
	Id                    types.String `tfsdk:"id"`
	Contactid             types.Int64  `tfsdk:"contactId"`
	Organizationid        types.Int64  `tfsdk:"organizationId"`
	Streetaddress         types.String `tfsdk:"streetAddress"`
	Streetaddress2        types.String `tfsdk:"streetAddress2"`
	Zipcode               types.String `tfsdk:"zipCode"`
	Faxnumber             types.String `tfsdk:"faxNumber"`
	Contacttype           types.String `tfsdk:"contactType"`
	Lastname              types.String `tfsdk:"lastName"`
	Countrycode           types.String `tfsdk:"countryCode"`
	Emailaddress          types.String `tfsdk:"emailAddress"`
	Primarycontact        types.String `tfsdk:"primaryContact"`
	City                  types.String `tfsdk:"city"`
	State                 types.String `tfsdk:"state"`
	Createdat             types.Int64  `tfsdk:"createdAt"`
	Primaryemailaddress   types.String `tfsdk:"primaryEmailAddress"`
	Distributorvisibility types.Bool   `tfsdk:"distributorVisibility"`
	Orgname               types.String `tfsdk:"orgName"`
	Firstname             types.String `tfsdk:"firstName"`
	Phonenumber           types.String `tfsdk:"phoneNumber"`
	Phonenumber2          types.String `tfsdk:"phoneNumber2"`
	Modifiedat            types.Int64  `tfsdk:"modifiedAt"`
}

// NewGetcontactDataSource creates a new getcontact data source
func NewGetcontactDataSource() datasource.DataSource {
	return &GetcontactDataSource{}
}

// Metadata returns the data source type name
func (d *GetcontactDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "umbrella_getcontact"
}

// Configure configures the data source with the provider client
func (d *GetcontactDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *GetcontactDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "getcontact data source",
		Attributes: map[string]schema.Attribute{
			"id":                    schema.StringAttribute{Computed: true, Description: "Data source identifier"},
			"contactId":             schema.Int64Attribute{Computed: true, Description: "The contact ID."},
			"organizationId":        schema.Int64Attribute{Computed: true, Description: "The organization ID."},
			"streetAddress":         schema.StringAttribute{Computed: true, Description: "The street address for the contact."},
			"streetAddress2":        schema.StringAttribute{Computed: true, Description: "A secondary street address for the contact."},
			"zipCode":               schema.StringAttribute{Computed: true, Description: "The US zip code where the contact is located."},
			"faxNumber":             schema.StringAttribute{Computed: true, Description: "The fax number for the contact."},
			"contactType":           schema.StringAttribute{Computed: true, Description: "The type of contact."},
			"lastName":              schema.StringAttribute{Computed: true, Description: "The last name of the contact."},
			"countryCode":           schema.StringAttribute{Computed: true, Description: "The country code for the contact."},
			"emailAddress":          schema.StringAttribute{Computed: true, Description: "The email address for the contact."},
			"primaryContact":        schema.StringAttribute{Computed: true, Description: "Specify if the primary contact."},
			"city":                  schema.StringAttribute{Computed: true, Description: "The city where the contact is located."},
			"state":                 schema.StringAttribute{Computed: true, Description: "The state where the contact is located."},
			"createdAt":             schema.Int64Attribute{Computed: true, Description: "The time when the contact information was created. The time is specified in milliseconds."},
			"primaryEmailAddress":   schema.StringAttribute{Computed: true, Description: "The email address of primary contact of distributor organization."},
			"distributorVisibility": schema.BoolAttribute{Computed: true, Description: "Specify whether distributors primary contact has visibility into trials."},
			"orgName":               schema.StringAttribute{Computed: true, Description: "The organization name of the distributor."},
			"firstName":             schema.StringAttribute{Computed: true, Description: "The first name of the contact."},
			"phoneNumber":           schema.StringAttribute{Computed: true, Description: "The phone number for the contact."},
			"phoneNumber2":          schema.StringAttribute{Computed: true, Description: "The second phone number for the contact."},
			"modifiedAt":            schema.Int64Attribute{Computed: true, Description: "The time when the contact information was last modified. The time is specified in milliseconds."},
		},
	}
}

// Read reads the getcontact data
func (d *GetcontactDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config getcontactDataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read logic is now implemented in the template

	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
