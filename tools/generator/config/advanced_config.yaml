# Advanced Configuration for Terraform Provider Code Generation
# This file extends the basic generation.yaml with sophisticated customization options

# Schema overrides for complex transformations
schema_overrides:
  # Global schema transformations
  global:
    # Convert specific types
    type_mappings:
      "string_with_format_date": "string"
      "string_with_format_date-time": "string"
      "integer_with_format_int64": "int64"
      "number_with_format_float": "float64"
    
    # Field name transformations
    field_mappings:
      "id": "ID"
      "url": "URL"
      "api": "API"
      "http": "HTTP"
      "json": "JSON"
      "xml": "XML"
      "uuid": "UUID"
    
    # Required field overrides
    force_required:
      - "name"
      - "id"
    
    # Optional field overrides
    force_optional:
      - "description"
      - "tags"
  
  # Resource-specific overrides
  resources:
    destination_list:
      # Custom schema transformations for destination_list
      schema_transforms:
        - field: "destinations"
          type: "list"
          element_type: "string"
          validation: "min_items=1,max_items=1000"
        - field: "access"
          type: "string"
          validation: "oneof=allow block"
      
      # Custom validation rules
      validation_rules:
        - rule: "destinations_not_empty"
          message: "Destination list must contain at least one destination"
        - rule: "valid_access_type"
          message: "Access must be either 'allow' or 'block'"
    
    network:
      schema_transforms:
        - field: "ip_address"
          type: "string"
          validation: "ip"
        - field: "subnet_mask"
          type: "string"
          validation: "cidr"

# Validation configuration
validation:
  # Enable/disable validation types
  enabled_validators:
    - "schema_consistency"
    - "api_compatibility"
    - "terraform_compliance"
    - "security_checks"
  
  # Custom validation functions
  custom_validators:
    ip_address:
      pattern: "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
      message: "Must be a valid IPv4 address"
    
    cidr_notation:
      pattern: "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$"
      message: "Must be a valid CIDR notation"
    
    domain_name:
      pattern: "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.[a-zA-Z]{2,}$"
      message: "Must be a valid domain name"
  
  # Security validation rules
  security_rules:
    - name: "no_hardcoded_secrets"
      pattern: "(password|secret|key|token)\\s*=\\s*[\"'][^\"']+[\"']"
      message: "Hardcoded secrets detected"
      severity: "error"
    
    - name: "no_insecure_protocols"
      pattern: "http://(?!localhost|127\\.0\\.0\\.1)"
      message: "Insecure HTTP protocol detected"
      severity: "warning"

# Plan modifiers configuration
plan_modifiers:
  # Default plan modifiers for different field types
  defaults:
    string:
      - "stringplanmodifier.RequiresReplace()"
      - "stringplanmodifier.UseStateForUnknown()"
    
    list:
      - "listplanmodifier.RequiresReplace()"
      - "listplanmodifier.UseStateForUnknown()"
    
    set:
      - "setplanmodifier.RequiresReplace()"
      - "setplanmodifier.UseStateForUnknown()"
  
  # Resource-specific plan modifiers
  resources:
    destination_list:
      name:
        - "stringplanmodifier.RequiresReplace()"
      destinations:
        - "listplanmodifier.UseStateForUnknown()"
      access:
        - "stringplanmodifier.UseStateForUnknown()"

# API-specific configurations
api_configs:
  # Umbrella API specific settings
  umbrella:
    base_url: "https://api.umbrella.com"
    version: "v2"
    
    # Rate limiting configuration
    rate_limiting:
      requests_per_second: 10
      burst_size: 20
      retry_attempts: 3
      retry_delay: "1s"
    
    # Authentication configuration
    authentication:
      type: "oauth2"
      scopes:
        - "read"
        - "write"
        - "admin"
    
    # Endpoint-specific configurations
    endpoints:
      "/policies/destinationlists":
        timeout: "30s"
        retry_attempts: 5
        cache_ttl: "5m"
      
      "/deployments/networks":
        timeout: "60s"
        retry_attempts: 3
        cache_ttl: "10m"

# Code generation customization
code_generation:
  # Import customization
  imports:
    # Additional imports for generated files
    additional:
      - "time"
      - "regexp"
      - "net"
      - "crypto/md5"
    
    # Custom import aliases
    aliases:
      "github.com/hashicorp/terraform-plugin-framework/types": "tftypes"
      "github.com/hashicorp/terraform-plugin-framework/resource/schema": "tfschema"
  
  # Function naming conventions
  naming:
    # Prefix/suffix for generated functions
    function_prefix: "Generated"
    function_suffix: ""
    
    # Case conversion rules
    case_conversion:
      fields: "snake_case"
      functions: "PascalCase"
      constants: "UPPER_CASE"
  
  # Error handling customization
  error_handling:
    # Custom error types
    custom_errors:
      - "ValidationError"
      - "APIError"
      - "ConfigurationError"
    
    # Error wrapping patterns
    wrap_patterns:
      - "fmt.Errorf(\"failed to %s: %w\", operation, err)"
      - "fmt.Errorf(\"%s operation failed: %w\", resourceName, err)"

# Quality assurance settings
quality_assurance:
  # Code quality checks
  code_quality:
    # Enable/disable specific checks
    enabled_checks:
      - "gofmt"
      - "golint"
      - "govet"
      - "ineffassign"
      - "misspell"
    
    # Custom quality rules
    custom_rules:
      - name: "function_length"
        max_lines: 50
        message: "Function too long, consider breaking it down"
      
      - name: "cyclomatic_complexity"
        max_complexity: 10
        message: "Function too complex, consider refactoring"
  
  # Test generation settings
  testing:
    # Test types to generate
    test_types:
      - "unit"
      - "integration"
      - "acceptance"
    
    # Test coverage requirements
    coverage:
      minimum: 80
      target: 90
    
    # Mock generation
    mocking:
      enabled: true
      mock_external_apis: true
      mock_file_pattern: "mock_%s.go"

# Performance optimization settings
performance:
  # Parallel processing configuration
  parallel_processing:
    enabled: true
    max_workers: 4
    batch_size: 10
  
  # Caching configuration
  caching:
    enabled: true
    cache_dir: ".generator_cache"
    ttl: "1h"
    
    # Cache keys for different operations
    cache_keys:
      parsed_specs: "spec_%s_%s"  # spec_file_hash_timestamp
      generated_schemas: "schema_%s_%s"
      template_renders: "template_%s_%s"
  
  # Incremental generation
  incremental:
    enabled: true
    change_detection: "file_hash"
    dependency_tracking: true

# Backward compatibility settings
compatibility:
  # Version detection
  version_detection:
    enabled: true
    version_file: "VERSION"
    
  # Migration settings
  migration:
    enabled: true
    migration_dir: "migrations"
    backup_existing: true
    
  # Deprecation warnings
  deprecation:
    enabled: true
    warning_format: "DEPRECATED: %s will be removed in version %s"
    
    # Deprecated patterns to warn about
    deprecated_patterns:
      - pattern: "resource.TestCase"
        replacement: "resource.Test"
        version: "v2.0.0"