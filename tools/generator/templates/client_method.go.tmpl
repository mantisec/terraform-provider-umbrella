// {{.MethodName}} {{.Description}}
func (c *apiClient) {{.MethodName}}(ctx context.Context{{if .Parameters}}, {{range .Parameters}}{{.Name}} {{.GoType}}{{if not .IsLast}}, {{end}}{{end}}{{end}}) ({{.ReturnType}}, error) {
	{{- if .PathParameters}}
	path := fmt.Sprintf("{{.Path}}", {{range .PathParameters}}{{.Name}}{{if not .IsLast}}, {{end}}{{end}})
	{{- else}}
	path := "{{.Path}}"
	{{- end}}

	{{- if .RequestBody}}
	payload := {{.RequestBody}}
	body, err := json.Marshal(payload)
	if err != nil {
		return {{.ZeroValue}}, fmt.Errorf("failed to marshal request body: %w", err)
	}
	{{- else}}
	var body []byte
	{{- end}}

	resp, err := c.do(ctx, "{{.Method}}", path, body)
	if err != nil {
		return {{.ZeroValue}}, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {{if eq .Method "POST"}}|| resp.StatusCode != http.StatusCreated{{end}} {
		return {{.ZeroValue}}, fmt.Errorf("API request failed with status: %s", resp.Status)
	}

	{{- if ne .ReturnType "error"}}
	var result {{.ReturnType}}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return {{.ZeroValue}}, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
	{{- else}}
	return nil
	{{- end}}
}