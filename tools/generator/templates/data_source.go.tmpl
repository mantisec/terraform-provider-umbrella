package {{.PackageName}}

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// {{.StructName}} implements the {{.ResourceName}} data source
type {{.StructName}} struct {
	client *apiClient
}

// {{.ResourceName}}DataModel represents the data source data model
type {{.ResourceName}}DataModel struct {
{{- range .Schema.Attributes}}
	{{pascalCase .Name}} {{.Type}} `tfsdk:"{{.Name}}"`
{{- end}}
}

// New{{.StructName}} creates a new {{.ResourceName}} data source
func New{{.StructName}}() datasource.DataSource {
	return &{{.StructName}}{}
}

// Metadata returns the data source type name
func (d *{{.StructName}}) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = "{{.TypeName}}"
}

// Configure configures the data source with the provider client
func (d *{{.StructName}}) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*apiClient)
	if !ok {
		resp.Diagnostics.AddError("Unexpected DataSource Configure Type", "Expected *apiClient")
		return
	}

	d.client = client
}

// Schema defines the data source schema
func (d *{{.StructName}}) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "{{.ResourceName}} data source",
		Attributes: map[string]schema.Attribute{
{{- range .Schema.Attributes}}
			"{{.Name}}": schema.{{if eq .Type "types.String"}}String{{else if eq .Type "types.Int64"}}Int64{{else if eq .Type "types.Bool"}}Bool{{else if eq .Type "types.Set"}}Set{{else}}String{{end}}Attribute{
				{{- if .Required}}Required: true,{{end}}
				{{- if .Optional}}Optional: true,{{end}}
				{{- if .Computed}}Computed: true,{{end}}
				{{- if .Description}}Description: "{{.Description}}",{{end}}
				{{- if eq .Type "types.Set"}}ElementType: types.StringType,{{end}}
			},
{{- end}}
		},
	}
}

{{- if .ReadEndpoint}}
// Read reads the {{.ResourceName}} data
func (d *{{.StructName}}) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config {{.ResourceName}}DataModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &config)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// TODO: Implement read logic using {{.ReadEndpoint.Method}} {{.ReadEndpoint.Path}}
	
	resp.Diagnostics.Append(resp.State.Set(ctx, &config)...)
}
{{- end}}